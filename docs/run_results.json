{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.2", "generated_at": "2023-12-19T20:57:34.857712Z", "invocation_id": "979867b9-9582-415c-8122-dfef88290fd3", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:30.023915Z", "completed_at": "2023-12-19T20:57:30.093121Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:30.094726Z", "completed_at": "2023-12-19T20:57:30.094747Z"}], "thread_id": "Thread-3", "execution_time": 0.09680795669555664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.qualtrics_source.stg_qualtrics__contact_mailing_list_membership_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `dbt-package-testing`.`qualtrics_tests`.`contact_mailing_list_membership`", "relation_name": "`dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__contact_mailing_list_membership_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:30.017814Z", "completed_at": "2023-12-19T20:57:30.093430Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:30.095048Z", "completed_at": "2023-12-19T20:57:30.095051Z"}], "thread_id": "Thread-2", "execution_time": 0.09811210632324219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.qualtrics_source.stg_qualtrics__block_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `dbt-package-testing`.`qualtrics_tests`.`block`", "relation_name": "`dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__block_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:30.050975Z", "completed_at": "2023-12-19T20:57:30.094412Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:30.097332Z", "completed_at": "2023-12-19T20:57:30.097335Z"}], "thread_id": "Thread-4", "execution_time": 0.09869813919067383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.qualtrics_source.stg_qualtrics__core_contact_tmp", "compiled": true, "compiled_code": "\n-- can disable \n\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `dbt-package-testing`.`qualtrics_tests`.`core_contact`", "relation_name": "`dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__core_contact_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:30.001879Z", "completed_at": "2023-12-19T20:57:30.095323Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:30.098537Z", "completed_at": "2023-12-19T20:57:30.098541Z"}], "thread_id": "Thread-1", "execution_time": 0.10338878631591797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.qualtrics_source.stg_qualtrics__block_question_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `dbt-package-testing`.`qualtrics_tests`.`block_question`", "relation_name": "`dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__block_question_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:30.106229Z", "completed_at": "2023-12-19T20:57:30.115813Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:30.117514Z", "completed_at": "2023-12-19T20:57:30.117520Z"}], "thread_id": "Thread-2", "execution_time": 0.018620967864990234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.qualtrics_source.stg_qualtrics__directory_contact_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `dbt-package-testing`.`qualtrics_tests`.`directory_contact`", "relation_name": "`dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__directory_contact_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:30.102722Z", "completed_at": "2023-12-19T20:57:30.116114Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:30.118021Z", "completed_at": "2023-12-19T20:57:30.118024Z"}], "thread_id": "Thread-3", "execution_time": 0.01986098289489746, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.qualtrics_source.stg_qualtrics__core_mailing_list_tmp", "compiled": true, "compiled_code": "\n-- can disable\n\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `dbt-package-testing`.`qualtrics_tests`.`core_mailing_list`", "relation_name": "`dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__core_mailing_list_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:30.110316Z", "completed_at": "2023-12-19T20:57:30.116675Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:30.119069Z", "completed_at": "2023-12-19T20:57:30.119073Z"}], "thread_id": "Thread-4", "execution_time": 0.018341064453125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.qualtrics_source.stg_qualtrics__directory_mailing_list_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `dbt-package-testing`.`qualtrics_tests`.`directory_mailing_list`", "relation_name": "`dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__directory_mailing_list_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:30.113175Z", "completed_at": "2023-12-19T20:57:30.117231Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:30.119836Z", "completed_at": "2023-12-19T20:57:30.119840Z"}], "thread_id": "Thread-1", "execution_time": 0.012269020080566406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.qualtrics_source.stg_qualtrics__directory_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `dbt-package-testing`.`qualtrics_tests`.`directory`", "relation_name": "`dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__directory_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:30.124470Z", "completed_at": "2023-12-19T20:57:30.136518Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:30.137716Z", "completed_at": "2023-12-19T20:57:30.137721Z"}], "thread_id": "Thread-2", "execution_time": 0.017221927642822266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.qualtrics_source.stg_qualtrics__distribution_contact_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `dbt-package-testing`.`qualtrics_tests`.`distribution_contact`", "relation_name": "`dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__distribution_contact_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:30.128254Z", "completed_at": "2023-12-19T20:57:30.136866Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:30.138026Z", "completed_at": "2023-12-19T20:57:30.138030Z"}], "thread_id": "Thread-3", "execution_time": 0.017028093338012695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.qualtrics_source.stg_qualtrics__distribution_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `dbt-package-testing`.`qualtrics_tests`.`distribution`", "relation_name": "`dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__distribution_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:30.131254Z", "completed_at": "2023-12-19T20:57:30.138291Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:30.140871Z", "completed_at": "2023-12-19T20:57:30.140875Z"}], "thread_id": "Thread-4", "execution_time": 0.018925905227661133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.qualtrics_source.stg_qualtrics__question_option_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `dbt-package-testing`.`qualtrics_tests`.`question_option`", "relation_name": "`dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__question_option_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:30.133899Z", "completed_at": "2023-12-19T20:57:30.138554Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:30.141164Z", "completed_at": "2023-12-19T20:57:30.141168Z"}], "thread_id": "Thread-1", "execution_time": 0.0188143253326416, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.qualtrics_source.stg_qualtrics__question_response_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `dbt-package-testing`.`qualtrics_tests`.`question_response`", "relation_name": "`dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__question_response_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:30.144261Z", "completed_at": "2023-12-19T20:57:30.201181Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:30.202697Z", "completed_at": "2023-12-19T20:57:30.202704Z"}], "thread_id": "Thread-2", "execution_time": 0.06251001358032227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.qualtrics_source.stg_qualtrics__question_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `dbt-package-testing`.`qualtrics_tests`.`question`", "relation_name": "`dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__question_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:30.147060Z", "completed_at": "2023-12-19T20:57:30.201464Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:30.202978Z", "completed_at": "2023-12-19T20:57:30.202982Z"}], "thread_id": "Thread-3", "execution_time": 0.0626370906829834, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.qualtrics_source.stg_qualtrics__sub_question_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `dbt-package-testing`.`qualtrics_tests`.`sub_question`", "relation_name": "`dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__sub_question_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:30.151705Z", "completed_at": "2023-12-19T20:57:30.202402Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:30.205000Z", "completed_at": "2023-12-19T20:57:30.205004Z"}], "thread_id": "Thread-4", "execution_time": 0.05599498748779297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.qualtrics_source.stg_qualtrics__survey_embedded_data_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `dbt-package-testing`.`qualtrics_tests`.`survey_embedded_data`", "relation_name": "`dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__survey_embedded_data_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:30.198657Z", "completed_at": "2023-12-19T20:57:30.203227Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:30.205869Z", "completed_at": "2023-12-19T20:57:30.205872Z"}], "thread_id": "Thread-1", "execution_time": 0.05686807632446289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.qualtrics_source.stg_qualtrics__survey_response_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `dbt-package-testing`.`qualtrics_tests`.`survey_response`", "relation_name": "`dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__survey_response_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:30.218629Z", "completed_at": "2023-12-19T20:57:30.220516Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:30.222401Z", "completed_at": "2023-12-19T20:57:30.222406Z"}], "thread_id": "Thread-1", "execution_time": 0.008674144744873047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.qualtrics_integration_tests.block", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:30.209360Z", "completed_at": "2023-12-19T20:57:30.220860Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:30.222671Z", "completed_at": "2023-12-19T20:57:30.222675Z"}], "thread_id": "Thread-2", "execution_time": 0.017477035522460938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.qualtrics_source.stg_qualtrics__survey_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `dbt-package-testing`.`qualtrics_tests`.`survey`", "relation_name": "`dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__survey_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:30.212344Z", "completed_at": "2023-12-19T20:57:30.221157Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:30.223171Z", "completed_at": "2023-12-19T20:57:30.223175Z"}], "thread_id": "Thread-3", "execution_time": 0.017833948135375977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.qualtrics_source.stg_qualtrics__survey_version_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `dbt-package-testing`.`qualtrics_tests`.`survey_version`", "relation_name": "`dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__survey_version_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:30.215949Z", "completed_at": "2023-12-19T20:57:30.221928Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:30.224449Z", "completed_at": "2023-12-19T20:57:30.224453Z"}], "thread_id": "Thread-4", "execution_time": 0.017139911651611328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.qualtrics_source.stg_qualtrics__user_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `dbt-package-testing`.`qualtrics_tests`.`user`", "relation_name": "`dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__user_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:30.229540Z", "completed_at": "2023-12-19T20:57:30.230859Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:30.236236Z", "completed_at": "2023-12-19T20:57:30.236242Z"}], "thread_id": "Thread-1", "execution_time": 0.010805845260620117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.qualtrics_integration_tests.block_question", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:30.231178Z", "completed_at": "2023-12-19T20:57:30.232257Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:30.236504Z", "completed_at": "2023-12-19T20:57:30.236507Z"}], "thread_id": "Thread-2", "execution_time": 0.010890007019042969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.qualtrics_integration_tests.contact_mailing_list_membership", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:30.232771Z", "completed_at": "2023-12-19T20:57:30.233874Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:30.236984Z", "completed_at": "2023-12-19T20:57:30.236987Z"}], "thread_id": "Thread-3", "execution_time": 0.010924100875854492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.qualtrics_integration_tests.core_contact", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:30.234640Z", "completed_at": "2023-12-19T20:57:30.235735Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:30.238283Z", "completed_at": "2023-12-19T20:57:30.238287Z"}], "thread_id": "Thread-4", "execution_time": 0.010871171951293945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.qualtrics_integration_tests.core_mailing_list", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:30.242603Z", "completed_at": "2023-12-19T20:57:30.244490Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:30.249831Z", "completed_at": "2023-12-19T20:57:30.249837Z"}], "thread_id": "Thread-1", "execution_time": 0.010778188705444336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.qualtrics_integration_tests.directory", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:30.244781Z", "completed_at": "2023-12-19T20:57:30.245930Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:30.250081Z", "completed_at": "2023-12-19T20:57:30.250084Z"}], "thread_id": "Thread-2", "execution_time": 0.010962963104248047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.qualtrics_integration_tests.directory_contact", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:30.246502Z", "completed_at": "2023-12-19T20:57:30.247583Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:30.250540Z", "completed_at": "2023-12-19T20:57:30.250543Z"}], "thread_id": "Thread-3", "execution_time": 0.011081933975219727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.qualtrics_integration_tests.directory_mailing_list", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:30.248291Z", "completed_at": "2023-12-19T20:57:30.249353Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:30.251892Z", "completed_at": "2023-12-19T20:57:30.251896Z"}], "thread_id": "Thread-4", "execution_time": 0.011288166046142578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.qualtrics_integration_tests.distribution", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:30.256204Z", "completed_at": "2023-12-19T20:57:30.257343Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:30.263113Z", "completed_at": "2023-12-19T20:57:30.263117Z"}], "thread_id": "Thread-1", "execution_time": 0.010406255722045898, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.qualtrics_integration_tests.distribution_contact", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:30.257609Z", "completed_at": "2023-12-19T20:57:30.259371Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:30.263361Z", "completed_at": "2023-12-19T20:57:30.263365Z"}], "thread_id": "Thread-2", "execution_time": 0.010514259338378906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.qualtrics_integration_tests.question", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:30.259848Z", "completed_at": "2023-12-19T20:57:30.260895Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:30.263818Z", "completed_at": "2023-12-19T20:57:30.263820Z"}], "thread_id": "Thread-3", "execution_time": 0.010621070861816406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.qualtrics_integration_tests.question_option", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:30.261607Z", "completed_at": "2023-12-19T20:57:30.262644Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:30.265041Z", "completed_at": "2023-12-19T20:57:30.265044Z"}], "thread_id": "Thread-4", "execution_time": 0.010783910751342773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.qualtrics_integration_tests.question_response", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:30.269450Z", "completed_at": "2023-12-19T20:57:30.270544Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:30.276281Z", "completed_at": "2023-12-19T20:57:30.276285Z"}], "thread_id": "Thread-1", "execution_time": 0.010469198226928711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.qualtrics_integration_tests.sub_question", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:30.270809Z", "completed_at": "2023-12-19T20:57:30.271841Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:30.276532Z", "completed_at": "2023-12-19T20:57:30.276535Z"}], "thread_id": "Thread-2", "execution_time": 0.010553836822509766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.qualtrics_integration_tests.survey", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:30.272310Z", "completed_at": "2023-12-19T20:57:30.273343Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:30.276988Z", "completed_at": "2023-12-19T20:57:30.276991Z"}], "thread_id": "Thread-3", "execution_time": 0.010679960250854492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.qualtrics_integration_tests.survey_embedded_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:30.274020Z", "completed_at": "2023-12-19T20:57:30.275803Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:30.278204Z", "completed_at": "2023-12-19T20:57:30.278207Z"}], "thread_id": "Thread-4", "execution_time": 0.010737895965576172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.qualtrics_integration_tests.survey_response", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:30.282597Z", "completed_at": "2023-12-19T20:57:30.283652Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:30.291372Z", "completed_at": "2023-12-19T20:57:30.291377Z"}], "thread_id": "Thread-1", "execution_time": 0.012702226638793945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.qualtrics_integration_tests.survey_version", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:30.283921Z", "completed_at": "2023-12-19T20:57:30.284951Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:30.291917Z", "completed_at": "2023-12-19T20:57:30.291922Z"}], "thread_id": "Thread-2", "execution_time": 0.012910842895507812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.qualtrics_integration_tests.user", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:30.285418Z", "completed_at": "2023-12-19T20:57:30.664732Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:30.666785Z", "completed_at": "2023-12-19T20:57:30.666791Z"}], "thread_id": "Thread-3", "execution_time": 0.38699960708618164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.qualtrics_source.stg_qualtrics__contact_mailing_list_membership", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__contact_mailing_list_membership_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    contact_id\n    \n as \n    \n    contact_id\n    \n, \n    \n    \n    contact_lookup_id\n    \n as \n    \n    contact_lookup_id\n    \n, \n    \n    \n    directory_id\n    \n as \n    \n    directory_id\n    \n, \n    \n    \n    mailing_list_id\n    \n as \n    \n    mailing_list_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    owner_id\n    \n as \n    \n    owner_id\n    \n, \n    \n    \n    unsubscribe_date\n    \n as \n    \n    unsubscribe_date\n    \n, \n    \n    \n    unsubscribed\n    \n as \n    \n    unsubscribed\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        contact_id,\n        contact_lookup_id,\n        directory_id,\n        mailing_list_id,\n        name,\n        owner_id as owner_user_id,\n        unsubscribe_date as unsubscribed_at,\n        unsubscribed as is_unsubscribed,\n        _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__contact_mailing_list_membership`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:30.300125Z", "completed_at": "2023-12-19T20:57:30.665090Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:30.667314Z", "completed_at": "2023-12-19T20:57:30.667318Z"}], "thread_id": "Thread-2", "execution_time": 0.37365293502807617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.qualtrics_source.stg_qualtrics__block_question", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__block_question_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    block_id\n    \n as \n    \n    block_id\n    \n, \n    \n    \n    question_id\n    \n as \n    \n    question_id\n    \n, \n    \n    \n    survey_id\n    \n as \n    \n    survey_id\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        block_id,\n        question_id,\n        survey_id,\n        _fivetran_deleted as is_deleted,\n        _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__block_question`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:30.296975Z", "completed_at": "2023-12-19T20:57:30.665417Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:30.667590Z", "completed_at": "2023-12-19T20:57:30.667593Z"}], "thread_id": "Thread-1", "execution_time": 0.3747861385345459, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.qualtrics_source.stg_qualtrics__core_contact", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__core_contact_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    mailing_list_id\n    \n as \n    \n    mailing_list_id\n    \n, \n    \n    \n    first_name\n    \n as \n    \n    first_name\n    \n, \n    \n    \n    last_name\n    \n as \n    \n    last_name\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    external_data_reference\n    \n as \n    \n    external_data_reference\n    \n, \n    \n    \n    language\n    \n as \n    \n    language\n    \n, \n    \n    \n    unsubscribed\n    \n as \n    \n    unsubscribed\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n\n\n\n    \n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as contact_id,\n        mailing_list_id,\n        first_name,\n        last_name,\n        lower(email) as email,\n        \n\n  \n    split(\n        email,\n        '@'\n        )[safe_offset(1)]\n  \n\n as email_domain,\n        external_data_reference,\n        language,\n        unsubscribed as is_unsubscribed,\n        _fivetran_deleted as is_deleted,\n        _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__core_contact`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:30.288527Z", "completed_at": "2023-12-19T20:57:30.665969Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:30.668460Z", "completed_at": "2023-12-19T20:57:30.668463Z"}], "thread_id": "Thread-4", "execution_time": 0.38866090774536133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.qualtrics_source.stg_qualtrics__block", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__block_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    block_locking\n    \n as \n    \n    block_locking\n    \n, \n    \n    \n    block_visibility\n    \n as \n    \n    block_visibility\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    randomize_questions\n    \n as \n    \n    randomize_questions\n    \n, \n    \n    \n    survey_id\n    \n as \n    \n    survey_id\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        block_locking as is_locked,\n        block_visibility,\n        description,\n        id as block_id,\n        randomize_questions,\n        survey_id,\n        type,\n        _fivetran_deleted as is_deleted,\n        _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__block`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:30.686143Z", "completed_at": "2023-12-19T20:57:31.106957Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:31.108679Z", "completed_at": "2023-12-19T20:57:31.108688Z"}], "thread_id": "Thread-4", "execution_time": 0.4368312358856201, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.qualtrics_source.stg_qualtrics__directory", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__directory_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    deduplication_criteria_email\n    \n as \n    \n    deduplication_criteria_email\n    \n, \n    \n    \n    deduplication_criteria_external_data_reference\n    \n as \n    \n    deduplication_criteria_external_data_reference\n    \n, \n    \n    \n    deduplication_criteria_first_name\n    \n as \n    \n    deduplication_criteria_first_name\n    \n, \n    \n    \n    deduplication_criteria_last_name\n    \n as \n    \n    deduplication_criteria_last_name\n    \n, \n    \n    \n    deduplication_criteria_phone\n    \n as \n    \n    deduplication_criteria_phone\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_default\n    \n as \n    \n    is_default\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n            \n    from base\n),\n\nfinal as (\n    \n    select \n        deduplication_criteria_email as is_deduped_on_email,\n        deduplication_criteria_external_data_reference as is_deduped_on_ext_ref,\n        deduplication_criteria_first_name as is_deduped_on_first_name,\n        deduplication_criteria_last_name as is_deduped_on_last_name,\n        deduplication_criteria_phone as is_deduped_on_phone,\n        id as directory_id,\n        is_default,\n        name,\n        _fivetran_deleted as is_deleted,\n        _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__directory`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:30.674365Z", "completed_at": "2023-12-19T20:57:31.107853Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:31.110794Z", "completed_at": "2023-12-19T20:57:31.110800Z"}], "thread_id": "Thread-3", "execution_time": 0.440814733505249, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.qualtrics_source.stg_qualtrics__directory_contact", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__directory_contact_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    creation_date\n    \n as \n    \n    creation_date\n    \n, \n    \n    \n    directory_id\n    \n as \n    \n    directory_id\n    \n, \n    \n    \n    directory_unsubscribe_date\n    \n as \n    \n    directory_unsubscribe_date\n    \n, \n    \n    \n    directory_unsubscribed\n    \n as \n    \n    directory_unsubscribed\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    email_domain\n    \n as \n    \n    email_domain\n    \n, \n    \n    \n    ext_ref\n    \n as \n    \n    ext_ref\n    \n, \n    \n    \n    first_name\n    \n as \n    \n    first_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    language\n    \n as \n    \n    language\n    \n, \n    \n    \n    last_modified\n    \n as \n    \n    last_modified\n    \n, \n    \n    \n    last_name\n    \n as \n    \n    last_name\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        creation_date as created_at,\n        directory_id,\n        directory_unsubscribe_date as unsubscribed_from_directory_at,\n        directory_unsubscribed as is_unsubscribed_from_directory,\n        lower(email) as email,\n        lower(email_domain) as email_domain,\n        ext_ref,\n        first_name,\n        last_name,\n        REGEXP_REPLACE(phone, '[^0-9]', '') AS phone, -- remove any non-numeric chars\n        id as contact_id,\n        language,\n        last_modified as last_modified_at,\n        _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__directory_contact`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:30.679387Z", "completed_at": "2023-12-19T20:57:31.108264Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:31.111449Z", "completed_at": "2023-12-19T20:57:31.111453Z"}], "thread_id": "Thread-1", "execution_time": 0.4406709671020508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.qualtrics_source.stg_qualtrics__directory_mailing_list", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__directory_mailing_list_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    creation_date\n    \n as \n    \n    creation_date\n    \n, \n    \n    \n    directory_id\n    \n as \n    \n    directory_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    last_modified_date\n    \n as \n    \n    last_modified_date\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    owner_id\n    \n as \n    \n    owner_id\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n            \n    from base\n),\n\nfinal as (\n    \n    select \n        creation_date as created_at,\n        directory_id,\n        id as mailing_list_id,\n        last_modified_date as last_modified_at,\n        name,\n        owner_id as owner_user_id,\n        _fivetran_deleted as is_deleted,\n        _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__directory_mailing_list`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:30.675393Z", "completed_at": "2023-12-19T20:57:31.109381Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:31.112927Z", "completed_at": "2023-12-19T20:57:31.112935Z"}], "thread_id": "Thread-2", "execution_time": 0.44254183769226074, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.qualtrics_source.stg_qualtrics__core_mailing_list", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__core_mailing_list_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    library_id\n    \n as \n    \n    library_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    category\n    \n as \n    \n    category\n    \n, \n    \n    \n    folder\n    \n as \n    \n    folder\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as mailing_list_id,\n        library_id,\n        name,\n        category,\n        folder,\n        _fivetran_deleted as is_deleted,\n        _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__core_mailing_list`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:31.130162Z", "completed_at": "2023-12-19T20:57:31.397721Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:31.398859Z", "completed_at": "2023-12-19T20:57:31.398879Z"}], "thread_id": "Thread-1", "execution_time": 0.28304195404052734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.qualtrics_source.stg_qualtrics__question_option", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__question_option_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    key\n    \n as \n    \n    key\n    \n, \n    \n    \n    question_id\n    \n as \n    \n    question_id\n    \n, \n    \n    \n    recode_value\n    \n as \n    \n    recode_value\n    \n, \n    \n    \n    survey_id\n    \n as \n    \n    survey_id\n    \n, \n    \n    \n    text\n    \n as \n    \n    text\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n            \n    from base\n),\n\nfinal as (\n    \n    select \n        question_id,\n        survey_id,\n        key,\n        recode_value,\n        text,\n        _fivetran_deleted as is_deleted,\n        _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__question_option`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:31.134185Z", "completed_at": "2023-12-19T20:57:31.462553Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:31.463314Z", "completed_at": "2023-12-19T20:57:31.463323Z"}], "thread_id": "Thread-2", "execution_time": 0.3438079357147217, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.qualtrics_source.stg_qualtrics__question_response", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__question_response_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_id\n    \n as \n    \n    _fivetran_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    loop_id\n    \n as \n    \n    loop_id\n    \n, \n    \n    \n    question\n    \n as \n    \n    question\n    \n, \n    \n    \n    question_id\n    \n as \n    \n    question_id\n    \n, \n    \n    \n    question_option_key\n    \n as \n    \n    question_option_key\n    \n, \n    \n    \n    response_id\n    \n as \n    \n    response_id\n    \n, \n    \n    \n    sub_question_key\n    \n as \n    \n    sub_question_key\n    \n, \n    \n    \n    sub_question_text\n    \n as \n    \n    sub_question_text\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n        \n        \n\n\n, cast('' as string) as source_relation\n\n\n\n            \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_id,\n        loop_id,\n        question_id,\n        question,\n        question_option_key,\n        response_id,\n        sub_question_key,\n        sub_question_text,\n        value,\n        _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__question_response`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:31.117350Z", "completed_at": "2023-12-19T20:57:31.481412Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:31.482059Z", "completed_at": "2023-12-19T20:57:31.482066Z"}], "thread_id": "Thread-4", "execution_time": 0.3686788082122803, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.qualtrics_source.stg_qualtrics__distribution_contact", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__distribution_contact_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    contact_frequency_rule_id\n    \n as \n    \n    contact_frequency_rule_id\n    \n, \n    \n    \n    contact_id\n    \n as \n    \n    contact_id\n    \n, \n    \n    \n    contact_lookup_id\n    \n as \n    \n    contact_lookup_id\n    \n, \n    \n    \n    distribution_id\n    \n as \n    \n    distribution_id\n    \n, \n    \n    \n    opened_at\n    \n as \n    \n    opened_at\n    \n, \n    \n    \n    response_completed_at\n    \n as \n    \n    response_completed_at\n    \n, \n    \n    \n    response_id\n    \n as \n    \n    response_id\n    \n, \n    \n    \n    response_started_at\n    \n as \n    \n    response_started_at\n    \n, \n    \n    \n    sent_at\n    \n as \n    \n    sent_at\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    survey_link\n    \n as \n    \n    survey_link\n    \n, \n    \n    \n    survey_session_id\n    \n as \n    \n    survey_session_id\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n            \n    from base\n),\n\nfinal as (\n    \n    select \n        contact_frequency_rule_id,\n        contact_id,\n        contact_lookup_id,\n        distribution_id,\n        opened_at,\n        response_completed_at,\n        response_id,\n        response_started_at,\n        sent_at,\n        status,\n        survey_link,\n        survey_session_id,\n        _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__distribution_contact`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:31.125998Z", "completed_at": "2023-12-19T20:57:31.510539Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:31.511111Z", "completed_at": "2023-12-19T20:57:31.511117Z"}], "thread_id": "Thread-3", "execution_time": 0.39554286003112793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.qualtrics_source.stg_qualtrics__distribution", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__distribution_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    header_from_email\n    \n as \n    \n    header_from_email\n    \n, \n    \n    \n    header_from_name\n    \n as \n    \n    header_from_name\n    \n, \n    \n    \n    header_reply_to_email\n    \n as \n    \n    header_reply_to_email\n    \n, \n    \n    \n    header_subject\n    \n as \n    \n    header_subject\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    message_library_id\n    \n as \n    \n    message_library_id\n    \n, \n    \n    \n    message_message_id\n    \n as \n    \n    message_message_id\n    \n, \n    \n    \n    message_message_text\n    \n as \n    \n    message_message_text\n    \n, \n    \n    \n    modified_date\n    \n as \n    \n    modified_date\n    \n, \n    \n    \n    organization_id\n    \n as \n    \n    organization_id\n    \n, \n    \n    \n    owner_id\n    \n as \n    \n    owner_id\n    \n, \n    \n    \n    parent_distribution_id\n    \n as \n    \n    parent_distribution_id\n    \n, \n    \n    \n    recipient_contact_id\n    \n as \n    \n    recipient_contact_id\n    \n, \n    \n    \n    recipient_library_id\n    \n as \n    \n    recipient_library_id\n    \n, \n    \n    \n    recipient_mailing_list_id\n    \n as \n    \n    recipient_mailing_list_id\n    \n, \n    \n    \n    recipient_sample_id\n    \n as \n    \n    recipient_sample_id\n    \n, \n    \n    \n    request_status\n    \n as \n    \n    request_status\n    \n, \n    \n    \n    request_type\n    \n as \n    \n    request_type\n    \n, \n    \n    \n    send_date\n    \n as \n    \n    send_date\n    \n, \n    \n    \n    survey_link_expiration_date\n    \n as \n    \n    survey_link_expiration_date\n    \n, \n    \n    \n    survey_link_link_type\n    \n as \n    \n    survey_link_link_type\n    \n, \n    \n    \n    survey_link_survey_id\n    \n as \n    \n    survey_link_survey_id\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n            \n    from base\n),\n\nfinal as (\n    \n    select \n        created_date as created_at,\n        header_from_email,\n        header_from_name,\n        header_reply_to_email,\n        header_subject,\n        id as distribution_id,\n        message_library_id,\n        message_message_id as message_id,\n        message_message_text as message_text,\n        modified_date as last_modified_at,\n        organization_id,\n        owner_id as owner_user_id,\n        parent_distribution_id,\n        recipient_contact_id,\n        recipient_library_id,\n        recipient_mailing_list_id,\n        recipient_sample_id,\n        request_status,\n        request_type,\n        send_date as send_at,\n        survey_link_expiration_date as survey_link_expires_at,\n        survey_link_link_type as survey_link_type,\n        survey_link_survey_id as survey_id,\n        _fivetran_deleted as is_deleted,\n        _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__distribution`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:31.402790Z", "completed_at": "2023-12-19T20:57:31.730974Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:31.731824Z", "completed_at": "2023-12-19T20:57:31.731834Z"}], "thread_id": "Thread-1", "execution_time": 0.33132004737854004, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.qualtrics_source.stg_qualtrics__question", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__question_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    data_export_tag\n    \n as \n    \n    data_export_tag\n    \n, \n    \n    \n    data_visibility_hidden\n    \n as \n    \n    data_visibility_hidden\n    \n, \n    \n    \n    data_visibility_private\n    \n as \n    \n    data_visibility_private\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    next_answer_id\n    \n as \n    \n    next_answer_id\n    \n, \n    \n    \n    next_choice_id\n    \n as \n    \n    next_choice_id\n    \n, \n    \n    \n    question_description\n    \n as \n    \n    question_description\n    \n, \n    \n    \n    question_description_option\n    \n as \n    \n    question_description_option\n    \n, \n    \n    \n    question_text\n    \n as \n    \n    question_text\n    \n, \n    \n    \n    question_text_unsafe\n    \n as \n    \n    question_text_unsafe\n    \n, \n    \n    \n    question_type\n    \n as \n    \n    question_type\n    \n, \n    \n    \n    selector\n    \n as \n    \n    selector\n    \n, \n    \n    \n    sub_selector\n    \n as \n    \n    sub_selector\n    \n, \n    \n    \n    survey_id\n    \n as \n    \n    survey_id\n    \n, \n    \n    \n    validation_setting_force_response\n    \n as \n    \n    validation_setting_force_response\n    \n, \n    \n    \n    validation_setting_force_response_type\n    \n as \n    \n    validation_setting_force_response_type\n    \n, \n    \n    \n    validation_setting_type\n    \n as \n    \n    validation_setting_type\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n            \n    from base\n),\n\nfinal as (\n    \n    select \n        data_export_tag,\n        data_visibility_hidden as is_data_hidden,\n        data_visibility_private as is_data_private,\n        id as question_id,\n        next_answer_id,\n        next_choice_id,\n        question_description,\n        question_description_option,\n        question_text,\n        question_text_unsafe,\n        question_type,\n        selector,\n        sub_selector,\n        survey_id,\n        validation_setting_force_response,\n        validation_setting_force_response_type,\n        validation_setting_type,\n        _fivetran_deleted as is_deleted,\n        _fivetran_synced,\n        source_relation\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__question`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:31.513026Z", "completed_at": "2023-12-19T20:57:31.829257Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:31.829932Z", "completed_at": "2023-12-19T20:57:31.829939Z"}], "thread_id": "Thread-3", "execution_time": 0.3182520866394043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.qualtrics_source.stg_qualtrics__survey_response", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__survey_response_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    distribution_channel\n    \n as \n    \n    distribution_channel\n    \n, \n    \n    \n    duration_in_seconds\n    \n as \n    \n    duration_in_seconds\n    \n, \n    \n    \n    end_date\n    \n as \n    \n    end_date\n    \n, \n    \n    \n    finished\n    \n as \n    \n    finished\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    ip_address\n    \n as \n    \n    ip_address\n    \n, \n    \n    \n    last_modified_date\n    \n as \n    \n    last_modified_date\n    \n, \n    \n    \n    location_latitude\n    \n as \n    \n    location_latitude\n    \n, \n    \n    \n    location_longitude\n    \n as \n    \n    location_longitude\n    \n, \n    \n    \n    progress\n    \n as \n    \n    progress\n    \n, \n    \n    \n    recipient_email\n    \n as \n    \n    recipient_email\n    \n, \n    \n    \n    recipient_first_name\n    \n as \n    \n    recipient_first_name\n    \n, \n    \n    \n    recipient_last_name\n    \n as \n    \n    recipient_last_name\n    \n, \n    \n    \n    recorded_date\n    \n as \n    \n    recorded_date\n    \n, \n    \n    \n    start_date\n    \n as \n    \n    start_date\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    survey_id\n    \n as \n    \n    survey_id\n    \n, \n    \n    \n    user_language\n    \n as \n    \n    user_language\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n            \n    from base\n),\n\nfinal as (\n    \n    select \n        distribution_channel,\n        duration_in_seconds,\n        end_date as finished_at,\n        cast(finished as boolean) as is_finished,\n        id as response_id,\n        ip_address,\n        last_modified_date as last_modified_at,\n        location_latitude,\n        location_longitude,\n        progress,\n        lower(recipient_email) as recipient_email,\n        recipient_first_name,\n        recipient_last_name,\n        recorded_date,\n        start_date as started_at,\n        status,\n        survey_id,\n        user_language,\n        _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__survey_response`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:31.466162Z", "completed_at": "2023-12-19T20:57:31.844083Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:31.844696Z", "completed_at": "2023-12-19T20:57:31.844702Z"}], "thread_id": "Thread-2", "execution_time": 0.3803391456604004, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.qualtrics_source.stg_qualtrics__sub_question", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__sub_question_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    choice_data_export_tag\n    \n as \n    \n    choice_data_export_tag\n    \n, \n    \n    \n    key\n    \n as \n    \n    key\n    \n, \n    \n    \n    question_id\n    \n as \n    \n    question_id\n    \n, \n    \n    \n    survey_id\n    \n as \n    \n    survey_id\n    \n, \n    \n    \n    text\n    \n as \n    \n    text\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n            \n    from base\n),\n\nfinal as (\n    \n    select \n        choice_data_export_tag,\n        key,\n        question_id,\n        survey_id,\n        text,\n        _fivetran_deleted as is_deleted,\n        _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__sub_question`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:31.484155Z", "completed_at": "2023-12-19T20:57:31.868701Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:31.869305Z", "completed_at": "2023-12-19T20:57:31.869311Z"}], "thread_id": "Thread-4", "execution_time": 0.38645386695861816, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.qualtrics_source.stg_qualtrics__survey_embedded_data", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__survey_embedded_data_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    import_id\n    \n as \n    \n    import_id\n    \n, \n    \n    \n    key\n    \n as \n    \n    key\n    \n, \n    \n    \n    response_id\n    \n as \n    \n    response_id\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n            \n    from base\n),\n\nfinal as (\n    \n    select \n        import_id,\n        key,\n        response_id,\n        value,\n        _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__survey_embedded_data`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:31.871119Z", "completed_at": "2023-12-19T20:57:31.880884Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:31.881462Z", "completed_at": "2023-12-19T20:57:31.881467Z"}], "thread_id": "Thread-4", "execution_time": 0.011482954025268555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.qualtrics_source.dbt_utils_unique_combination_of_columns_stg_qualtrics__contact_mailing_list_membership_contact_lookup_id__source_relation.943f4b419c", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        contact_lookup_id, source_relation\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__contact_mailing_list_membership`\n    group by contact_lookup_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:31.883266Z", "completed_at": "2023-12-19T20:57:31.889362Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:31.889876Z", "completed_at": "2023-12-19T20:57:31.889880Z"}], "thread_id": "Thread-4", "execution_time": 0.007748842239379883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.qualtrics_source.not_null_stg_qualtrics__contact_mailing_list_membership_contact_lookup_id.32d4d7bbf5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contact_lookup_id\nfrom `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__contact_mailing_list_membership`\nwhere contact_lookup_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:31.891539Z", "completed_at": "2023-12-19T20:57:31.896239Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:31.896746Z", "completed_at": "2023-12-19T20:57:31.896750Z"}], "thread_id": "Thread-4", "execution_time": 0.006253719329833984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.qualtrics_source.dbt_utils_unique_combination_of_columns_stg_qualtrics__block_question_block_id__question_id__survey_id__source_relation.2fd7c420b5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        block_id, question_id, survey_id, source_relation\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__block_question`\n    group by block_id, question_id, survey_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:31.898373Z", "completed_at": "2023-12-19T20:57:31.902087Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:31.902583Z", "completed_at": "2023-12-19T20:57:31.902587Z"}], "thread_id": "Thread-4", "execution_time": 0.0052318572998046875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.qualtrics_source.dbt_utils_unique_combination_of_columns_stg_qualtrics__core_contact_contact_id__mailing_list_id__source_relation.fbdaf339c9", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        contact_id, mailing_list_id, source_relation\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__core_contact`\n    group by contact_id, mailing_list_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:31.904183Z", "completed_at": "2023-12-19T20:57:31.907169Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:31.907659Z", "completed_at": "2023-12-19T20:57:31.907663Z"}], "thread_id": "Thread-4", "execution_time": 0.004486083984375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.qualtrics_source.dbt_utils_unique_combination_of_columns_stg_qualtrics__block_block_id__survey_id__source_relation.9105cad472", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        block_id, survey_id, source_relation\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__block`\n    group by block_id, survey_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:31.909254Z", "completed_at": "2023-12-19T20:57:31.912902Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:31.913433Z", "completed_at": "2023-12-19T20:57:31.913437Z"}], "thread_id": "Thread-4", "execution_time": 0.0052280426025390625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.qualtrics_source.dbt_utils_unique_combination_of_columns_stg_qualtrics__directory_directory_id__source_relation.9c637ae3e0", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        directory_id, source_relation\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__directory`\n    group by directory_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:31.915070Z", "completed_at": "2023-12-19T20:57:31.918131Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:31.918617Z", "completed_at": "2023-12-19T20:57:31.918621Z"}], "thread_id": "Thread-4", "execution_time": 0.004575967788696289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.qualtrics_source.not_null_stg_qualtrics__directory_directory_id.65413cdcf7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect directory_id\nfrom `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__directory`\nwhere directory_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:31.932042Z", "completed_at": "2023-12-19T20:57:31.935172Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:31.935665Z", "completed_at": "2023-12-19T20:57:31.935669Z"}], "thread_id": "Thread-4", "execution_time": 0.004661083221435547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.qualtrics_source.dbt_utils_unique_combination_of_columns_stg_qualtrics__directory_contact_contact_id__directory_id__source_relation.a3dc488ebf", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        contact_id, directory_id, source_relation\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__directory_contact`\n    group by contact_id, directory_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:31.937259Z", "completed_at": "2023-12-19T20:57:31.940291Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:31.940792Z", "completed_at": "2023-12-19T20:57:31.940796Z"}], "thread_id": "Thread-4", "execution_time": 0.004550933837890625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.qualtrics_source.dbt_utils_unique_combination_of_columns_stg_qualtrics__directory_mailing_list_mailing_list_id__directory_id__source_relation.24870adb73", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        mailing_list_id, directory_id, source_relation\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__directory_mailing_list`\n    group by mailing_list_id, directory_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:31.942407Z", "completed_at": "2023-12-19T20:57:31.945475Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:31.945967Z", "completed_at": "2023-12-19T20:57:31.945971Z"}], "thread_id": "Thread-4", "execution_time": 0.0045948028564453125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.qualtrics_source.dbt_utils_unique_combination_of_columns_stg_qualtrics__core_mailing_list_mailing_list_id__source_relation.fcd78a8fd6", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        mailing_list_id, source_relation\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__core_mailing_list`\n    group by mailing_list_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:31.947537Z", "completed_at": "2023-12-19T20:57:31.951079Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:31.951565Z", "completed_at": "2023-12-19T20:57:31.951569Z"}], "thread_id": "Thread-4", "execution_time": 0.005023002624511719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.qualtrics_source.not_null_stg_qualtrics__core_mailing_list_mailing_list_id.344fbdd6dc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect mailing_list_id\nfrom `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__core_mailing_list`\nwhere mailing_list_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:31.953142Z", "completed_at": "2023-12-19T20:57:31.956483Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:31.959352Z", "completed_at": "2023-12-19T20:57:31.959357Z"}], "thread_id": "Thread-4", "execution_time": 0.007272005081176758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.qualtrics_source.dbt_utils_unique_combination_of_columns_stg_qualtrics__question_option_question_id__survey_id__key__source_relation.af5af3057f", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        question_id, survey_id, key, source_relation\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__question_option`\n    group by question_id, survey_id, key, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:31.963573Z", "completed_at": "2023-12-19T20:57:31.967077Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:31.967595Z", "completed_at": "2023-12-19T20:57:31.967599Z"}], "thread_id": "Thread-4", "execution_time": 0.007544040679931641, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.qualtrics_source.dbt_utils_unique_combination_of_columns_stg_qualtrics__question_response__fivetran_id__source_relation.2e0556a912", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _fivetran_id, source_relation\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__question_response`\n    group by _fivetran_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:31.969233Z", "completed_at": "2023-12-19T20:57:31.972180Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:31.972669Z", "completed_at": "2023-12-19T20:57:31.972673Z"}], "thread_id": "Thread-4", "execution_time": 0.004456758499145508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.qualtrics_source.not_null_stg_qualtrics__question_response__fivetran_id.6e47cc53d7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect _fivetran_id\nfrom `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__question_response`\nwhere _fivetran_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:31.974259Z", "completed_at": "2023-12-19T20:57:31.977644Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:31.978156Z", "completed_at": "2023-12-19T20:57:31.978160Z"}], "thread_id": "Thread-4", "execution_time": 0.004931926727294922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.qualtrics_source.dbt_utils_unique_combination_of_columns_stg_qualtrics__distribution_contact_contact_id__distribution_id__source_relation.b40826e6b2", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        contact_id, distribution_id, source_relation\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__distribution_contact`\n    group by contact_id, distribution_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:31.979731Z", "completed_at": "2023-12-19T20:57:31.990207Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:31.990720Z", "completed_at": "2023-12-19T20:57:31.990726Z"}], "thread_id": "Thread-4", "execution_time": 0.012008190155029297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.qualtrics.qualtrics__directory", "compiled": true, "compiled_code": "with directory as (\n\n    select *\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__directory`\n),\n\ndirectory_contact as (\n    \n    select *\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__directory_contact`\n),\n\ndirectory_mailing_list as (\n\n    select *\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__directory_mailing_list`\n),\n\ndistribution_contact as (\n\n    select *\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__distribution_contact`\n),\n\ndistribution as (\n\n    select *\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__distribution`\n),\n\nagg_mailing_lists as (\n    \n    select \n        directory_id,\n        source_relation,\n        count(distinct mailing_list_id) as count_mailing_lists\n    \n    from directory_mailing_list\n    where not coalesce(is_deleted, false)\n    group by 1,2\n),\n\nagg_contacts as (\n\n    select \n        directory_id,\n        source_relation,\n        count(distinct email) as count_distinct_emails,\n        count(distinct phone) as count_distinct_phones,\n        count(distinct contact_id) as total_count_contacts,\n        count(distinct case when is_unsubscribed_from_directory then contact_id else null end) as total_count_unsubscribed_contacts,\n        count(distinct case when \n  \n\n    timestamp_diff(\n        current_timestamp(),\n        created_at,\n        day\n    )\n\n\n <= 30 then contact_id else null end) as count_contacts_created_30d,\n        count(distinct case when is_unsubscribed_from_directory and \n  \n\n    timestamp_diff(\n        current_timestamp(),\n        unsubscribed_from_directory_at,\n        day\n    )\n\n\n <= 30 then contact_id else null end) as count_contacts_unsubscribed_30d\n\n    from directory_contact\n    group by 1,2\n),\n\nagg_distributions as (\n-- of contacts sent surveys in the past 30 days, did they open or respond to the surveys?\n    select \n        directory_contact.directory_id,\n        directory_contact.source_relation, \n        count(distinct distribution_contact.contact_id) as count_contacts_sent_survey_30d, \n        count(distinct case when distribution_contact.opened_at is not null then distribution_contact.contact_id end) as count_contacts_opened_survey_30d,\n        count(distinct case when distribution_contact.response_started_at is not null then distribution_contact.contact_id end) as count_contacts_started_survey_30d,\n        count(distinct case when distribution_contact.response_completed_at is not null then distribution_contact.contact_id end) as count_contacts_completed_survey_30d,\n        count(distinct distribution.survey_id) as count_surveys_sent_30d\n        \n    from distribution_contact\n    inner join directory_contact \n        on distribution_contact.contact_id = directory_contact.contact_id\n        and distribution_contact.source_relation = directory_contact.source_relation\n    left join distribution \n        on distribution_contact.distribution_id = distribution.distribution_id \n        and distribution_contact.source_relation = distribution.source_relation\n    where sent_at is not null \n        and \n  \n\n    timestamp_diff(\n        current_timestamp(),\n        distribution_contact.sent_at,\n        day\n    )\n\n\n <= 30\n    \n    group by 1,2\n),\n\nfinal as (\n\n    select \n        directory.*,\n        coalesce(agg_contacts.count_distinct_emails, 0) as count_distinct_emails,\n        coalesce(agg_contacts.count_distinct_phones, 0) as count_distinct_phones,\n        coalesce(agg_contacts.total_count_contacts, 0) as total_count_contacts,\n        coalesce(agg_contacts.total_count_unsubscribed_contacts, 0) as total_count_unsubscribed_contacts,\n        coalesce(agg_contacts.count_contacts_created_30d, 0) as count_contacts_created_30d,\n        coalesce(agg_contacts.count_contacts_unsubscribed_30d, 0) as count_contacts_unsubscribed_30d,\n        coalesce(agg_distributions.count_contacts_sent_survey_30d, 0) as count_contacts_sent_survey_30d,\n        coalesce(agg_distributions.count_contacts_opened_survey_30d, 0) as count_contacts_opened_survey_30d,\n        coalesce(agg_distributions.count_contacts_started_survey_30d, 0) as count_contacts_started_survey_30d,\n        coalesce(agg_distributions.count_contacts_completed_survey_30d, 0) as count_contacts_completed_survey_30d,\n        coalesce(agg_distributions.count_surveys_sent_30d, 0) as count_surveys_sent_30d,\n        coalesce(agg_mailing_lists.count_mailing_lists, 0) as count_mailing_lists\n\n    from directory \n    left join agg_contacts\n        on directory.directory_id = agg_contacts.directory_id\n        and directory.source_relation = agg_contacts.source_relation\n    left join agg_distributions\n        on directory.directory_id = agg_distributions.directory_id\n        and directory.source_relation = agg_distributions.source_relation\n    left join agg_mailing_lists\n        on directory.directory_id = agg_mailing_lists.directory_id\n        and directory.source_relation = agg_mailing_lists.source_relation\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`qualtrics_tests_qualtrics`.`qualtrics__directory`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:31.992354Z", "completed_at": "2023-12-19T20:57:31.995763Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:31.996513Z", "completed_at": "2023-12-19T20:57:31.996519Z"}], "thread_id": "Thread-4", "execution_time": 0.005308866500854492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.qualtrics_source.dbt_utils_unique_combination_of_columns_stg_qualtrics__distribution_distribution_id__source_relation.312f709e9c", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        distribution_id, source_relation\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__distribution`\n    group by distribution_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:31.998460Z", "completed_at": "2023-12-19T20:57:32.001829Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:32.002346Z", "completed_at": "2023-12-19T20:57:32.002351Z"}], "thread_id": "Thread-4", "execution_time": 0.005116939544677734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.qualtrics_source.not_null_stg_qualtrics__distribution_distribution_id.6158e414ed", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect distribution_id\nfrom `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__distribution`\nwhere distribution_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:32.004144Z", "completed_at": "2023-12-19T20:57:32.007364Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:32.007888Z", "completed_at": "2023-12-19T20:57:32.007892Z"}], "thread_id": "Thread-4", "execution_time": 0.004865884780883789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.qualtrics_source.dbt_utils_unique_combination_of_columns_stg_qualtrics__question_question_id__survey_id__source_relation.1e5f78924a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        question_id, survey_id, source_relation\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__question`\n    group by question_id, survey_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:32.014463Z", "completed_at": "2023-12-19T20:57:32.018944Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:32.019481Z", "completed_at": "2023-12-19T20:57:32.019486Z"}], "thread_id": "Thread-4", "execution_time": 0.0061299800872802734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.qualtrics_source.dbt_utils_unique_combination_of_columns_stg_qualtrics__survey_response_response_id__source_relation.c97ddff72b", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        response_id, source_relation\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__survey_response`\n    group by response_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:32.021181Z", "completed_at": "2023-12-19T20:57:32.024250Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:32.024765Z", "completed_at": "2023-12-19T20:57:32.024769Z"}], "thread_id": "Thread-4", "execution_time": 0.004651784896850586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.qualtrics_source.not_null_stg_qualtrics__survey_response_response_id.864d3a83e3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect response_id\nfrom `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__survey_response`\nwhere response_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:32.033025Z", "completed_at": "2023-12-19T20:57:32.036038Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:32.036531Z", "completed_at": "2023-12-19T20:57:32.036535Z"}], "thread_id": "Thread-4", "execution_time": 0.004523038864135742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.qualtrics_source.dbt_utils_unique_combination_of_columns_stg_qualtrics__sub_question_question_id__survey_id__key__source_relation.12c68e2ef2", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        question_id, survey_id, key, source_relation\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__sub_question`\n    group by question_id, survey_id, key, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:32.042820Z", "completed_at": "2023-12-19T20:57:32.047595Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:32.048138Z", "completed_at": "2023-12-19T20:57:32.048143Z"}], "thread_id": "Thread-4", "execution_time": 0.006468057632446289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.qualtrics_source.dbt_utils_unique_combination_of_columns_stg_qualtrics__survey_embedded_data_import_id__response_id__key__value__source_relation.73ba345920", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        import_id, response_id, key, value, source_relation\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__survey_embedded_data`\n    group by import_id, response_id, key, value, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:31.734780Z", "completed_at": "2023-12-19T20:57:32.097234Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:32.097765Z", "completed_at": "2023-12-19T20:57:32.097780Z"}], "thread_id": "Thread-1", "execution_time": 0.3646869659423828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.qualtrics_source.stg_qualtrics__survey", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__survey_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    auto_scoring_category\n    \n as \n    \n    auto_scoring_category\n    \n, \n    \n    \n    brand_base_url\n    \n as \n    \n    brand_base_url\n    \n, \n    \n    \n    brand_id\n    \n as \n    \n    brand_id\n    \n, \n    \n    \n    bundle_short_name\n    \n as \n    \n    bundle_short_name\n    \n, \n    \n    \n    composition_type\n    \n as \n    \n    composition_type\n    \n, \n    \n    \n    creator_id\n    \n as \n    \n    creator_id\n    \n, \n    \n    \n    default_scoring_category\n    \n as \n    \n    default_scoring_category\n    \n, \n    \n    \n    division_id\n    \n as \n    \n    division_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    last_accessed\n    \n as \n    \n    last_accessed\n    \n, \n    \n    \n    last_activated\n    \n as \n    \n    last_activated\n    \n, \n    \n    \n    last_modified\n    \n as \n    \n    last_modified\n    \n, \n    \n    \n    owner_id\n    \n as \n    \n    owner_id\n    \n, \n    \n    \n    project_category\n    \n as \n    \n    project_category\n    \n, \n    \n    \n    project_type\n    \n as \n    \n    project_type\n    \n, \n    \n    \n    registry_sha\n    \n as \n    \n    registry_sha\n    \n, \n    \n    \n    registry_version\n    \n as \n    \n    registry_version\n    \n, \n    \n    \n    schema_version\n    \n as \n    \n    schema_version\n    \n, \n    \n    \n    scoring_summary_after_questions\n    \n as \n    \n    scoring_summary_after_questions\n    \n, \n    \n    \n    scoring_summary_after_survey\n    \n as \n    \n    scoring_summary_after_survey\n    \n, \n    \n    \n    scoring_summary_category\n    \n as \n    \n    scoring_summary_category\n    \n, \n    \n    \n    survey_name\n    \n as \n    \n    survey_name\n    \n, \n    \n    \n    survey_status\n    \n as \n    \n    survey_status\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n            \n    from base\n),\n\nfinal as (\n    \n    select \n        id as survey_id,\n        survey_name,\n        survey_status,\n        brand_base_url,\n        brand_id,\n        bundle_short_name,\n        composition_type,\n        auto_scoring_category,\n        default_scoring_category,\n        division_id,\n        creator_id as creator_user_id,\n        owner_id as owner_user_id,\n        project_category,\n        project_type,\n        registry_sha,\n        registry_version,\n        schema_version,\n        scoring_summary_after_questions,\n        scoring_summary_after_survey,\n        scoring_summary_category,\n        last_accessed as last_accessed_at,\n        last_activated as last_activated_at,\n        last_modified as last_modified_at,\n        _fivetran_deleted as is_deleted,\n        _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__survey`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:32.049852Z", "completed_at": "2023-12-19T20:57:32.103448Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:32.103945Z", "completed_at": "2023-12-19T20:57:32.103949Z"}], "thread_id": "Thread-4", "execution_time": 0.055174827575683594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.qualtrics.qualtrics__contact", "compiled": true, "compiled_code": "with  __dbt__cte__int_qualtrics__contacts as (\n\nwith directory_contact as (\n\n    select *\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__directory_contact`\n),\n\ncontact_mailing_list_membership as (\n\n    select * \n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__contact_mailing_list_membership`\n),\n\n-- in XM directory a contact can belong to multiple mailing lists within a directory\n-- need to split counts and string_aggs on redshift \ncount_mailing_lists as (\n\n    select \n        directory_id,\n        contact_id,\n        source_relation,\n        count(distinct case when not is_unsubscribed then mailing_list_id else null end) as count_mailing_lists_subscribed_to,\n        count(distinct case when is_unsubscribed then mailing_list_id else null end) as count_mailing_lists_unsubscribed_from\n\n    from contact_mailing_list_membership\n    group by 1,2,3\n),\n\n-- in XM directory a contact can belong to multiple mailing lists within a directory\n-- need to split counts and string_aggs on redshift \nagg_mailing_lists as (\n\n    select \n        directory_id,\n        contact_id,\n        source_relation,\n        \n    string_agg(mailing_list_id, ', ')\n\n as mailing_list_ids\n\n    from contact_mailing_list_membership\n    group by 1,2,3\n),\n\ndirectory_contact_join as (\n\n    select\n        directory_contact.*,\n        count_mailing_lists.count_mailing_lists_subscribed_to,\n        count_mailing_lists.count_mailing_lists_unsubscribed_from,\n        agg_mailing_lists.mailing_list_ids\n    from directory_contact\n    left join agg_mailing_lists\n        on directory_contact.contact_id = agg_mailing_lists.contact_id\n        and directory_contact.directory_id = agg_mailing_lists.directory_id \n        and directory_contact.source_relation = agg_mailing_lists.source_relation\n    left join count_mailing_lists\n        on directory_contact.contact_id = count_mailing_lists.contact_id\n        and directory_contact.directory_id = count_mailing_lists.directory_id \n        and directory_contact.source_relation = count_mailing_lists.source_relation\n),\n\n\ncore_contact as (\n\n    select *\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__core_contact`\n),\n\n-- Roll up mailing lists since contacts in the XM directory endpoint can belong to multiple (or none)\n-- need to split counts and string_aggs on redshift \ncount_core_mailing_lists as (\n\n    select \n        contact_id,\n        source_relation,\n        count(distinct case when not is_unsubscribed then mailing_list_id else null end) as count_mailing_lists_subscribed_to,\n        count(distinct case when is_unsubscribed then mailing_list_id else null end) as count_mailing_lists_unsubscribed_from\n\n    from core_contact\n    group by 1,2\n),\n\n-- Roll up mailing lists since contacts in the XM directory endpoint can belong to multiple (or none)\n-- need to split counts and string_aggs on redshift \nagg_core_mailing_lists as (\n\n    select \n        contact_id,\n        source_relation,\n        \n    string_agg(mailing_list_id, ', ')\n\n as mailing_list_ids\n\n    from core_contact\n    group by 1,2\n),\n\ncore_contact_join  as (\n\n    select\n        core_contact.*,\n        count_core_mailing_lists.count_mailing_lists_subscribed_to,\n        count_core_mailing_lists.count_mailing_lists_unsubscribed_from,\n        agg_core_mailing_lists.mailing_list_ids\n    from core_contact\n    left join agg_core_mailing_lists\n        on core_contact.contact_id = agg_core_mailing_lists.contact_id\n        and core_contact.source_relation = agg_core_mailing_lists.source_relation\n    left join count_core_mailing_lists\n        on core_contact.contact_id = count_core_mailing_lists.contact_id\n        and core_contact.source_relation = count_core_mailing_lists.source_relation\n),\n\nfinal as (\n\n    select\n        contact_id,\n        false as is_xm_directory_contact,\n        true as is_research_core_contact,\n        null as directory_id,\n        email,\n        email_domain,\n        first_name,\n        last_name,\n        external_data_reference,\n        language,\n        null as is_unsubscribed_from_directory,\n        null as unsubscribed_from_directory_at,\n        null as last_modified_at,\n        mailing_list_ids,\n        count_mailing_lists_subscribed_to,\n        count_mailing_lists_unsubscribed_from,\n        _fivetran_synced as created_at,\n        source_relation\n\n        \n\n        \n\n\n\n\n\n\n    from core_contact_join\n    union all \n\n\n\n    select\n        contact_id,\n        true as is_xm_directory_contact,\n        false as is_research_core_contact,\n        directory_id,\n        email,\n        email_domain,\n        first_name,\n        last_name,\n        ext_ref as external_data_reference,\n        language,\n        is_unsubscribed_from_directory,\n        unsubscribed_from_directory_at,\n        last_modified_at,\n        mailing_list_ids,\n        count_mailing_lists_subscribed_to,\n        count_mailing_lists_unsubscribed_from,\n        created_at,\n        source_relation\n        \n\n\n\n\n\n        \n\n    from directory_contact_join\n)\n\nselect *\nfrom final\n), contacts as (\n\n    select *\n    from __dbt__cte__int_qualtrics__contacts\n),\n\ndirectory as (\n\n    select *\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__directory`\n),\n\ndistribution_contact as (\n\n    select *\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__distribution_contact`\n),\n\ndistribution as (\n-- just to grab survey id \n    select *\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__distribution`\n),\n\nsurvey_response as (\n\n    select *\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__survey_response`\n),\n\ndistribution_response as (\n\n    select\n        distribution_contact.*,\n        distribution.survey_id,\n        survey_response.distribution_channel,\n        survey_response.progress,\n        survey_response.duration_in_seconds,\n        survey_response.is_finished,\n        survey_response.recorded_date\n\n    from distribution_contact \n    left join distribution\n        on distribution_contact.distribution_id = distribution.distribution_id\n        and distribution_contact.source_relation = distribution.source_relation\n    left join survey_response\n        on distribution_contact.response_id = survey_response.response_id\n        and distribution.survey_id = survey_response.survey_id\n        and distribution_contact.source_relation = survey_response.source_relation\n),\n\nagg_distribution_responses as (\n\n    select \n        contact_id,\n        source_relation,\n        count(distinct case when sent_at is not null and distribution_channel = 'email' then survey_id end) as count_surveys_sent_email,\n        count(distinct case when sent_at is not null and distribution_channel = 'smsinvite' then survey_id end) as count_surveys_sent_sms,\n        count(distinct case when opened_at is not null and distribution_channel = 'email' then survey_id end) as count_surveys_opened_email,\n        count(distinct case when opened_at is not null and distribution_channel = 'smsinvite' then survey_id end) as count_surveys_opened_sms,\n        count(distinct case when response_started_at is not null and distribution_channel = 'email' then survey_id end) as count_surveys_started_email,\n        count(distinct case when response_started_at is not null and distribution_channel = 'smsinvite' then survey_id end) as count_surveys_started_sms,\n        count(distinct case when response_completed_at is not null and distribution_channel = 'email' then survey_id end) as count_surveys_completed_email,\n        count(distinct case when response_completed_at is not null and distribution_channel = 'smsinvite' then survey_id end) as count_surveys_completed_sms\n    from distribution_response\n    group by 1,2\n),\n\nagg_survey_responses as (\n\n    select \n        contact_id,\n        source_relation,\n        count(distinct survey_id) as total_count_surveys,\n        count(distinct case when is_finished then survey_id else null end) as total_count_completed_surveys,\n        avg(progress) as avg_survey_progress_pct,\n        avg(duration_in_seconds) as avg_survey_duration_in_seconds,\n        max(recorded_date) as last_survey_response_recorded_at,\n        min(recorded_date) as first_survey_response_recorded_at\n        \n    from distribution_response\n    group by 1,2\n),\n\ncalc_medians as (\n\n    select \n        contact_id,\n        source_relation,\n        median_survey_duration_in_seconds,\n        median_survey_progress_pct\n        \n    from (\n        select \n            contact_id, \n            source_relation,\n            \n\n    percentile_cont( \n        duration_in_seconds, \n        0.5) \n        over (partition by contact_id,source_relation    \n        )\n\n as median_survey_duration_in_seconds,\n            \n\n    percentile_cont( \n        progress, \n        0.5) \n        over (partition by contact_id,source_relation    \n        )\n\n as median_survey_progress_pct\n\n        from distribution_response\n         -- percentile macro uses an aggregate function on postgres and window functions on other DBs\n    ) as rollup_medians\n     group by 1,2,3,4  -- roll up if using window function\n),\n\nfinal as (\n    \n    select \n        contacts.*,\n        coalesce(agg_distribution_responses.count_surveys_sent_email, 0) as count_surveys_sent_email,\n        coalesce(agg_distribution_responses.count_surveys_sent_sms, 0) as count_surveys_sent_sms,\n        coalesce(agg_distribution_responses.count_surveys_opened_email, 0) as count_surveys_opened_email,\n        coalesce(agg_distribution_responses.count_surveys_opened_sms, 0) as count_surveys_opened_sms,\n        coalesce(agg_distribution_responses.count_surveys_started_email, 0) as count_surveys_started_email,\n        coalesce(agg_distribution_responses.count_surveys_started_sms, 0) as count_surveys_started_sms,\n        coalesce(agg_distribution_responses.count_surveys_completed_email, 0) as count_surveys_completed_email,\n        coalesce(agg_distribution_responses.count_surveys_completed_sms, 0) as count_surveys_completed_sms,\n        coalesce(agg_survey_responses.total_count_surveys, 0) as total_count_surveys,\n        coalesce(agg_survey_responses.total_count_completed_surveys, 0) as total_count_completed_surveys,\n        agg_survey_responses.avg_survey_progress_pct,\n        agg_survey_responses.avg_survey_duration_in_seconds,\n        calc_medians.median_survey_progress_pct,\n        calc_medians.median_survey_duration_in_seconds,\n        agg_survey_responses.last_survey_response_recorded_at,\n        agg_survey_responses.first_survey_response_recorded_at,\n        directory.name as directory_name,\n        directory.is_default as is_in_default_directory,\n        directory.is_deleted as is_directory_deleted\n\n    from contacts\n    left join agg_survey_responses\n        on contacts.contact_id = agg_survey_responses.contact_id\n        and contacts.source_relation = agg_survey_responses.source_relation\n    left join agg_distribution_responses\n        on contacts.contact_id = agg_distribution_responses.contact_id\n        and contacts.source_relation = agg_distribution_responses.source_relation\n    left join directory\n        on contacts.directory_id = directory.directory_id \n        and contacts.source_relation = directory.source_relation\n    left join calc_medians\n        on contacts.contact_id = calc_medians.contact_id\n        and contacts.source_relation = calc_medians.source_relation\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`qualtrics_tests_qualtrics`.`qualtrics__contact`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:32.099480Z", "completed_at": "2023-12-19T20:57:32.108903Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:32.109397Z", "completed_at": "2023-12-19T20:57:32.109401Z"}], "thread_id": "Thread-1", "execution_time": 0.010972976684570312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.qualtrics.dbt_utils_unique_combination_of_columns_qualtrics__directory_source_relation__directory_id.21547652b0", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, directory_id\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics`.`qualtrics__directory`\n    group by source_relation, directory_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:32.105722Z", "completed_at": "2023-12-19T20:57:32.113914Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:32.114521Z", "completed_at": "2023-12-19T20:57:32.114525Z"}], "thread_id": "Thread-4", "execution_time": 0.009882926940917969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.qualtrics_source.dbt_utils_unique_combination_of_columns_stg_qualtrics__survey_survey_id__source_relation.a1fd5a2968", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        survey_id, source_relation\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__survey`\n    group by survey_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:32.110994Z", "completed_at": "2023-12-19T20:57:32.116206Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:32.135280Z", "completed_at": "2023-12-19T20:57:32.135287Z"}], "thread_id": "Thread-1", "execution_time": 0.02536177635192871, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.qualtrics_source.not_null_stg_qualtrics__survey_survey_id.2796651e04", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect survey_id\nfrom `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__survey`\nwhere survey_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:32.116471Z", "completed_at": "2023-12-19T20:57:32.141916Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:32.142414Z", "completed_at": "2023-12-19T20:57:32.142418Z"}], "thread_id": "Thread-4", "execution_time": 0.027254104614257812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.qualtrics.qualtrics__response", "compiled": true, "compiled_code": "with  __dbt__cte__int_qualtrics__responses as (\nwith question_response as (\n\n    select *\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__question_response`\n),\n\nsurvey_response as (\n\n    select *\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__survey_response`\n),\n\nresponse_join as (\n\n    select \n        question_response._fivetran_id as question_response_id,\n        question_response.response_id as survey_response_id,\n        survey_response.survey_id,\n        question_response.question_id,\n        question_response.question as question_text,\n        question_response.sub_question_key,\n        question_response.sub_question_text,\n        question_response.question_option_key,\n        question_response.value,\n        question_response.loop_id,\n        survey_response.distribution_channel,\n        survey_response.status as survey_response_status,\n        survey_response.progress as survey_progress,\n        survey_response.duration_in_seconds,\n        survey_response.is_finished as is_finished_with_survey,\n        survey_response.finished_at as survey_finished_at,\n        survey_response.last_modified_at as survey_response_last_modified_at,\n        survey_response.recorded_date as survey_response_recorded_at,\n        survey_response.started_at as survey_response_started_at,\n        survey_response.recipient_email,\n        survey_response.recipient_first_name,\n        survey_response.recipient_last_name,\n        survey_response.user_language,\n        survey_response.ip_address,\n        survey_response.location_latitude,\n        survey_response.location_longitude,\n        question_response.source_relation\n    \n    from question_response \n    inner join survey_response -- every question response will belong to an overall \"survey response\"\n        on question_response.response_id = survey_response.response_id\n        and question_response.source_relation = survey_response.source_relation\n        \n)\n\nselect *\nfrom response_join\n),  __dbt__cte__int_qualtrics__question as (\nwith question as (\n\n    select *\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__question`\n),\n\nblock_question as (\n\n    select *\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__block_question`\n    where not coalesce(is_deleted, false) -- lets get rid of deleted questions\n),\n\nblock as (\n\n    select *\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__block`\n),\n\nsub_question as (\n    \n    select *\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__sub_question`\n),\n\nquestion_join as (\n\n    select\n        question.question_id,\n        \n\n  \n    split(\n        question.question_id,\n        '#'\n        )[safe_offset(0)]\n  \n\n as parent_question_id,\n        question.question_text,\n        question.survey_id,\n        question.question_description,\n        question.question_description_option,\n        sub_question.key as sub_question_key,\n        sub_question.text as sub_question_text,\n        question.question_type,\n        question.selector,\n        question.sub_selector,\n        question.is_data_hidden,\n        question.is_data_private,\n        question.is_deleted as is_question_deleted,\n        question.validation_setting_force_response,\n        question.validation_setting_force_response_type,\n        question.validation_setting_type,\n        question.data_export_tag,\n        sub_question.choice_data_export_tag,\n        block.block_id,\n        block.description as block_description,\n        block.randomize_questions as block_question_randomization,\n        block.type as block_type,\n        block.block_visibility,\n        block.is_locked as is_block_locked,\n        block.is_deleted as is_block_deleted,\n        question.next_answer_id,\n        question.next_choice_id,\n        question.source_relation\n\n    from question\n    left join sub_question\n        on question.question_id = sub_question.question_id \n        and question.survey_id = sub_question.survey_id\n        and question.source_relation = sub_question.source_relation\n    \n    left join block_question\n        on question.question_id = block_question.question_id\n        and question.survey_id = block_question.survey_id\n        and question.source_relation = block_question.source_relation\n\n    left join block\n        on block_question.block_id = block.block_id\n        and block_question.survey_id = block.survey_id\n        and block_question.source_relation = block.source_relation\n\n)\n\nselect *\nfrom question_join\n),  __dbt__cte__int_qualtrics__survey_embedded_data as (\nwith survey_embedded_data as (\n\n    select *\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__survey_embedded_data`\n),\n\njsonify as (\n\n    select\n        response_id, -- survey_response\n        source_relation,\n        '{' || \n    string_agg(key || ':' || value, ', ')\n\n || '}' as embedded_data\n    from survey_embedded_data\n    group by 1,2\n)\n\nselect \n    response_id,\n    source_relation,\n    embedded_data\nfrom jsonify \ngroup by 1,2,3\n),  __dbt__cte__int_qualtrics__contacts as (\n\nwith directory_contact as (\n\n    select *\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__directory_contact`\n),\n\ncontact_mailing_list_membership as (\n\n    select * \n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__contact_mailing_list_membership`\n),\n\n-- in XM directory a contact can belong to multiple mailing lists within a directory\n-- need to split counts and string_aggs on redshift \ncount_mailing_lists as (\n\n    select \n        directory_id,\n        contact_id,\n        source_relation,\n        count(distinct case when not is_unsubscribed then mailing_list_id else null end) as count_mailing_lists_subscribed_to,\n        count(distinct case when is_unsubscribed then mailing_list_id else null end) as count_mailing_lists_unsubscribed_from\n\n    from contact_mailing_list_membership\n    group by 1,2,3\n),\n\n-- in XM directory a contact can belong to multiple mailing lists within a directory\n-- need to split counts and string_aggs on redshift \nagg_mailing_lists as (\n\n    select \n        directory_id,\n        contact_id,\n        source_relation,\n        \n    string_agg(mailing_list_id, ', ')\n\n as mailing_list_ids\n\n    from contact_mailing_list_membership\n    group by 1,2,3\n),\n\ndirectory_contact_join as (\n\n    select\n        directory_contact.*,\n        count_mailing_lists.count_mailing_lists_subscribed_to,\n        count_mailing_lists.count_mailing_lists_unsubscribed_from,\n        agg_mailing_lists.mailing_list_ids\n    from directory_contact\n    left join agg_mailing_lists\n        on directory_contact.contact_id = agg_mailing_lists.contact_id\n        and directory_contact.directory_id = agg_mailing_lists.directory_id \n        and directory_contact.source_relation = agg_mailing_lists.source_relation\n    left join count_mailing_lists\n        on directory_contact.contact_id = count_mailing_lists.contact_id\n        and directory_contact.directory_id = count_mailing_lists.directory_id \n        and directory_contact.source_relation = count_mailing_lists.source_relation\n),\n\n\ncore_contact as (\n\n    select *\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__core_contact`\n),\n\n-- Roll up mailing lists since contacts in the XM directory endpoint can belong to multiple (or none)\n-- need to split counts and string_aggs on redshift \ncount_core_mailing_lists as (\n\n    select \n        contact_id,\n        source_relation,\n        count(distinct case when not is_unsubscribed then mailing_list_id else null end) as count_mailing_lists_subscribed_to,\n        count(distinct case when is_unsubscribed then mailing_list_id else null end) as count_mailing_lists_unsubscribed_from\n\n    from core_contact\n    group by 1,2\n),\n\n-- Roll up mailing lists since contacts in the XM directory endpoint can belong to multiple (or none)\n-- need to split counts and string_aggs on redshift \nagg_core_mailing_lists as (\n\n    select \n        contact_id,\n        source_relation,\n        \n    string_agg(mailing_list_id, ', ')\n\n as mailing_list_ids\n\n    from core_contact\n    group by 1,2\n),\n\ncore_contact_join  as (\n\n    select\n        core_contact.*,\n        count_core_mailing_lists.count_mailing_lists_subscribed_to,\n        count_core_mailing_lists.count_mailing_lists_unsubscribed_from,\n        agg_core_mailing_lists.mailing_list_ids\n    from core_contact\n    left join agg_core_mailing_lists\n        on core_contact.contact_id = agg_core_mailing_lists.contact_id\n        and core_contact.source_relation = agg_core_mailing_lists.source_relation\n    left join count_core_mailing_lists\n        on core_contact.contact_id = count_core_mailing_lists.contact_id\n        and core_contact.source_relation = count_core_mailing_lists.source_relation\n),\n\nfinal as (\n\n    select\n        contact_id,\n        false as is_xm_directory_contact,\n        true as is_research_core_contact,\n        null as directory_id,\n        email,\n        email_domain,\n        first_name,\n        last_name,\n        external_data_reference,\n        language,\n        null as is_unsubscribed_from_directory,\n        null as unsubscribed_from_directory_at,\n        null as last_modified_at,\n        mailing_list_ids,\n        count_mailing_lists_subscribed_to,\n        count_mailing_lists_unsubscribed_from,\n        _fivetran_synced as created_at,\n        source_relation\n\n        \n\n        \n\n\n\n\n\n\n    from core_contact_join\n    union all \n\n\n\n    select\n        contact_id,\n        true as is_xm_directory_contact,\n        false as is_research_core_contact,\n        directory_id,\n        email,\n        email_domain,\n        first_name,\n        last_name,\n        ext_ref as external_data_reference,\n        language,\n        is_unsubscribed_from_directory,\n        unsubscribed_from_directory_at,\n        last_modified_at,\n        mailing_list_ids,\n        count_mailing_lists_subscribed_to,\n        count_mailing_lists_unsubscribed_from,\n        created_at,\n        source_relation\n        \n\n\n\n\n\n        \n\n    from directory_contact_join\n)\n\nselect *\nfrom final\n), response as (\n    -- will probably move the logic from this int model to the end model directly \n    select *\n    from __dbt__cte__int_qualtrics__responses\n),\n\nquestion_option as (\n\n    select *\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__question_option`\n),\n\nquestion as (\n\n    select *\n    from __dbt__cte__int_qualtrics__question\n),\n\nsurvey as (\n\n    select *\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__survey`\n),\n\nembedded_data as (\n\n    select *\n    from __dbt__cte__int_qualtrics__survey_embedded_data\n),\n\ncontacts as (\n\n    select *\n    from __dbt__cte__int_qualtrics__contacts\n),\n\nrollup_contacts as (\n\n    select \n        email,\n        source_relation,\n        max(email_domain) as email_domain,\n        max(first_name) as first_name,\n        max(last_name) as last_name,\n        max(language) as language,\n        max(external_data_reference) as external_data_reference,\n        \n\n    max( is_xm_directory_contact )\n\n as is_xm_directory_contact,\n        \n\n    max( is_research_core_contact )\n\n as is_research_core_contact\n\n    from contacts\n    group by 1,2\n),\n\nfinal as (\n\n    select \n        response.*,\n        question_option.recode_value,\n        question_option.text as question_option_text,\n        rollup_contacts.first_name,\n        rollup_contacts.last_name,\n        rollup_contacts.email_domain,\n        rollup_contacts.language as contact_language,\n        rollup_contacts.external_data_reference as contact_external_data_reference,\n        rollup_contacts.is_xm_directory_contact,\n        rollup_contacts.is_research_core_contact,\n\n        embedded_data.embedded_data,\n        survey.survey_name,\n        survey.survey_status,\n        survey.project_category,\n        survey.project_type,\n        survey.brand_base_url,\n        \n        -- most question fields are included, as there is no question end model. join with `int_qualtrics__question` to bring in more\n        question.question_description,\n        question.question_type,\n        question.block_id,\n        question.block_description,\n        question.block_question_randomization,\n        question.block_type,\n        question.block_visibility,\n        question.validation_setting_force_response,\n        question.validation_setting_force_response_type,\n        question.validation_setting_type,\n        question.is_question_deleted,\n        question.is_block_deleted\n\n    from response\n\n    left join question\n        on response.question_id = question.question_id\n        and response.survey_id = question.survey_id\n        and response.sub_question_key = question.sub_question_key\n        and response.source_relation = question.source_relation\n\n    left join question_option\n        on response.question_id = question_option.question_id \n        and response.survey_id = question_option.survey_id\n        and response.question_option_key = question_option.key\n        and response.source_relation = question_option.source_relation\n\n    left join survey\n        on response.survey_id = survey.survey_id\n        and response.source_relation = survey.source_relation\n\n    left join embedded_data\n        on response.survey_response_id = embedded_data.response_id\n        and response.source_relation = embedded_data.source_relation\n\n    left join rollup_contacts \n        on response.recipient_email = rollup_contacts.email\n        and response.source_relation = rollup_contacts.source_relation\n\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`qualtrics_tests_qualtrics`.`qualtrics__response`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:32.136941Z", "completed_at": "2023-12-19T20:57:32.143182Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:32.143755Z", "completed_at": "2023-12-19T20:57:32.143758Z"}], "thread_id": "Thread-1", "execution_time": 0.008112192153930664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.qualtrics.dbt_utils_unique_combination_of_columns_qualtrics__contact_source_relation__directory_id__contact_id.b3bb833816", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, directory_id, contact_id\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics`.`qualtrics__contact`\n    group by source_relation, directory_id, contact_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:32.152627Z", "completed_at": "2023-12-19T20:57:32.162256Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:32.162780Z", "completed_at": "2023-12-19T20:57:32.162785Z"}], "thread_id": "Thread-1", "execution_time": 0.017612934112548828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.qualtrics.dbt_utils_unique_combination_of_columns_qualtrics__response_source_relation__survey_response_id__question_response_id__sub_question_key.af535210ca", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, survey_response_id, question_response_id, sub_question_key\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics`.`qualtrics__response`\n    group by source_relation, survey_response_id, question_response_id, sub_question_key\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:31.832230Z", "completed_at": "2023-12-19T20:57:32.178193Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:32.178704Z", "completed_at": "2023-12-19T20:57:32.178709Z"}], "thread_id": "Thread-3", "execution_time": 0.3478667736053467, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.qualtrics_source.stg_qualtrics__survey_version", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__survey_version_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    creation_date\n    \n as \n    \n    creation_date\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    published\n    \n as \n    \n    published\n    \n, \n    \n    \n    survey_id\n    \n as \n    \n    survey_id\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n, \n    \n    \n    version_number\n    \n as \n    \n    version_number\n    \n, \n    \n    \n    was_published\n    \n as \n    \n    was_published\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n            \n    from base\n),\n\nfinal as (\n    \n    select \n        creation_date as created_at,\n        description as version_description,\n        id as version_id,\n        published as is_published,\n        survey_id,\n        user_id as publisher_user_id,\n        version_number,\n        was_published,\n        _fivetran_deleted as is_deleted,\n        _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__survey_version`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:32.180695Z", "completed_at": "2023-12-19T20:57:32.184407Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:32.184939Z", "completed_at": "2023-12-19T20:57:32.184943Z"}], "thread_id": "Thread-1", "execution_time": 0.005418062210083008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.qualtrics_source.dbt_utils_unique_combination_of_columns_stg_qualtrics__survey_version_version_id__survey_id__source_relation.513ef528c1", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        version_id, survey_id, source_relation\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__survey_version`\n    group by version_id, survey_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:31.846961Z", "completed_at": "2023-12-19T20:57:32.265667Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:32.266270Z", "completed_at": "2023-12-19T20:57:32.266275Z"}], "thread_id": "Thread-2", "execution_time": 0.42077207565307617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.qualtrics_source.stg_qualtrics__user", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__user_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_creation_date\n    \n as \n    \n    account_creation_date\n    \n, \n    \n    \n    account_expiration_date\n    \n as \n    \n    account_expiration_date\n    \n, \n    \n    \n    account_status\n    \n as \n    \n    account_status\n    \n, \n    \n    \n    division_id\n    \n as \n    \n    division_id\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    first_name\n    \n as \n    \n    first_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    language\n    \n as \n    \n    language\n    \n, \n    \n    \n    last_login_date\n    \n as \n    \n    last_login_date\n    \n, \n    \n    \n    last_name\n    \n as \n    \n    last_name\n    \n, \n    \n    \n    organization_id\n    \n as \n    \n    organization_id\n    \n, \n    \n    \n    password_expiration_date\n    \n as \n    \n    password_expiration_date\n    \n, \n    \n    \n    password_last_changed_date\n    \n as \n    \n    password_last_changed_date\n    \n, \n    \n    \n    response_count_auditable\n    \n as \n    \n    response_count_auditable\n    \n, \n    \n    \n    response_count_deleted\n    \n as \n    \n    response_count_deleted\n    \n, \n    \n    \n    response_count_generated\n    \n as \n    \n    response_count_generated\n    \n, \n    \n    \n    time_zone\n    \n as \n    \n    time_zone\n    \n, \n    \n    \n    unsubscribed\n    \n as \n    \n    unsubscribed\n    \n, \n    \n    \n    user_type\n    \n as \n    \n    user_type\n    \n, \n    \n    \n    username\n    \n as \n    \n    username\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n            \n    from base\n),\n\nfinal as (\n    \n    select \n        account_creation_date as account_created_at,\n        account_expiration_date as account_expires_at,\n        account_status,\n        division_id,\n        email,\n        first_name,\n        id as user_id,\n        language,\n        last_login_date as last_login_at,\n        last_name,\n        organization_id,\n        password_expiration_date as password_expires_at,\n        password_last_changed_date as password_last_changed_at,\n        response_count_auditable,\n        response_count_deleted,\n        response_count_generated,\n        time_zone,\n        unsubscribed as is_unsubscribed,\n        user_type,\n        username,\n        _fivetran_deleted as is_deleted,\n        _fivetran_synced,\n        source_relation\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__user`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:32.284625Z", "completed_at": "2023-12-19T20:57:32.289040Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:32.290879Z", "completed_at": "2023-12-19T20:57:32.290884Z"}], "thread_id": "Thread-2", "execution_time": 0.0225830078125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.qualtrics_source.dbt_utils_unique_combination_of_columns_stg_qualtrics__user_user_id__source_relation.73c4de157d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        user_id, source_relation\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__user`\n    group by user_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:32.274404Z", "completed_at": "2023-12-19T20:57:32.289578Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:32.291405Z", "completed_at": "2023-12-19T20:57:32.291408Z"}], "thread_id": "Thread-1", "execution_time": 0.027352094650268555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.qualtrics.qualtrics__distribution", "compiled": true, "compiled_code": "with distribution as (\n\n    select *\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__distribution`\n),\n\nqualtrics_user as (\n\n    select *\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__user`\n),\n\ndirectory_mailing_list as (\n\n    select *\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__directory_mailing_list`\n),\n\n\ncore_mailing_list as (\n\n    select *\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__core_mailing_list`\n),\n\n\ndistribution_contact as (\n\n    select \n        *,\n        -- all relative to sent_at (should response be relative to opened_at?)\n        \n  \n\n    timestamp_diff(\n        opened_at,\n        sent_at,\n        second\n    )\n\n\n as time_to_open_in_seconds,\n        \n  \n\n    timestamp_diff(\n        response_started_at,\n        sent_at,\n        second\n    )\n\n\n as time_to_start_in_seconds,\n        \n  \n\n    timestamp_diff(\n        response_completed_at,\n        sent_at,\n        second\n    )\n\n\n as time_to_complete_in_seconds\n\n\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__distribution_contact`\n),\n\npivoted_metrics as (\n\n    select \n        distribution_id,\n        source_relation,\n        -- current metrics\n        \n        sum(case when lower(status) = 'pending' then 1 else 0 end) as current_count_surveys_pending,\n        \n        sum(case when lower(status) = 'success' then 1 else 0 end) as current_count_surveys_success,\n        \n        sum(case when lower(status) = 'error' then 1 else 0 end) as current_count_surveys_error,\n        \n        sum(case when lower(status) = 'opened' then 1 else 0 end) as current_count_surveys_opened,\n        \n        sum(case when lower(status) = 'complaint' then 1 else 0 end) as current_count_surveys_complaint,\n        \n        sum(case when lower(status) = 'skipped' then 1 else 0 end) as current_count_surveys_skipped,\n        \n        sum(case when lower(status) = 'blocked' then 1 else 0 end) as current_count_surveys_blocked,\n        \n        sum(case when lower(status) = 'failure' then 1 else 0 end) as current_count_surveys_failure,\n        \n        sum(case when lower(status) = 'unknown' then 1 else 0 end) as current_count_surveys_unknown,\n        \n        sum(case when lower(status) = 'softbounce' then 1 else 0 end) as current_count_surveys_softbounce,\n        \n        sum(case when lower(status) = 'hardbounce' then 1 else 0 end) as current_count_surveys_hardbounce,\n        \n        sum(case when lower(status) = 'surveystarted' then 1 else 0 end) as current_count_surveys_surveystarted,\n        \n        sum(case when lower(status) = 'surveypartiallyfinished' then 1 else 0 end) as current_count_surveys_surveypartiallyfinished,\n        \n        sum(case when lower(status) = 'surveyfinished' then 1 else 0 end) as current_count_surveys_surveyfinished,\n        \n        sum(case when lower(status) = 'surveyscreenedout' then 1 else 0 end) as current_count_surveys_surveyscreenedout,\n        \n        sum(case when lower(status) = 'sessionexpired' then 1 else 0 end) as current_count_surveys_sessionexpired,\n        \n        count(distinct contact_id) as total_count_contacts,\n        count(distinct case when sent_at is not null then contact_id else null end) as count_contacts_sent_surveys,\n        count(distinct case when opened_at is not null then contact_id else null end) as count_contacts_opened_surveys,\n        count(distinct case when response_started_at is not null then contact_id else null end) as count_contacts_started_surveys,\n        count(distinct case when response_completed_at is not null then contact_id else null end) as count_contacts_completed_surveys,\n        min(sent_at) as first_survey_sent_at,\n        max(sent_at) as last_survey_sent_at,\n        min(opened_at) as first_survey_opened_at,\n        max(opened_at) as last_survey_opened_at,\n        min(response_completed_at) as first_response_completed_at,\n        max(response_completed_at) as last_response_completed_at,\n        avg(time_to_open_in_seconds) as avg_time_to_open_in_seconds,\n        avg(time_to_start_in_seconds) as avg_time_to_start_in_seconds,\n        avg(time_to_complete_in_seconds) as avg_time_to_complete_in_seconds\n\n    from distribution_contact\n    group by 1,2\n),\n\ncalc_medians as (\n    \n    select \n        distribution_id,\n        source_relation,\n        median_time_to_open_in_seconds,\n        median_time_to_start_in_seconds,\n        median_time_to_complete_in_seconds\n    from (\n        select \n            distribution_id, \n            source_relation,\n            \n\n    percentile_cont( \n        time_to_open_in_seconds, \n        0.5) \n        over (partition by distribution_id,source_relation    \n        )\n\n as median_time_to_open_in_seconds,\n            \n\n    percentile_cont( \n        time_to_start_in_seconds, \n        0.5) \n        over (partition by distribution_id,source_relation    \n        )\n\n as median_time_to_start_in_seconds,\n            \n\n    percentile_cont( \n        time_to_complete_in_seconds, \n        0.5) \n        over (partition by distribution_id,source_relation    \n        )\n\n as median_time_to_complete_in_seconds\n\n        from distribution_contact\n         -- percentile macro uses an aggregate function on postgres and window functions on other DBs\n    ) as rollup_medians\n     group by 1,2,3,4,5  -- roll up if using window function\n),\n\nfinal as (\n\n    select \n        distribution.*,\n        parent_distribution.header_subject as parent_distribution_header_subject,\n        coalesce(directory_mailing_list.name, core_mailing_list.name) as recipient_mailing_list_name,\n        qualtrics_user.email as owner_email,\n        qualtrics_user.first_name as owner_first_name,\n        qualtrics_user.last_name as owner_last_name,\n        \n        coalesce(pivoted_metrics.current_count_surveys_pending, 0) as current_count_surveys_pending,\n        \n        coalesce(pivoted_metrics.current_count_surveys_success, 0) as current_count_surveys_success,\n        \n        coalesce(pivoted_metrics.current_count_surveys_error, 0) as current_count_surveys_error,\n        \n        coalesce(pivoted_metrics.current_count_surveys_opened, 0) as current_count_surveys_opened,\n        \n        coalesce(pivoted_metrics.current_count_surveys_complaint, 0) as current_count_surveys_complaint,\n        \n        coalesce(pivoted_metrics.current_count_surveys_skipped, 0) as current_count_surveys_skipped,\n        \n        coalesce(pivoted_metrics.current_count_surveys_blocked, 0) as current_count_surveys_blocked,\n        \n        coalesce(pivoted_metrics.current_count_surveys_failure, 0) as current_count_surveys_failure,\n        \n        coalesce(pivoted_metrics.current_count_surveys_unknown, 0) as current_count_surveys_unknown,\n        \n        coalesce(pivoted_metrics.current_count_surveys_softbounce, 0) as current_count_surveys_softbounce,\n        \n        coalesce(pivoted_metrics.current_count_surveys_hardbounce, 0) as current_count_surveys_hardbounce,\n        \n        coalesce(pivoted_metrics.current_count_surveys_surveystarted, 0) as current_count_surveys_surveystarted,\n        \n        coalesce(pivoted_metrics.current_count_surveys_surveypartiallyfinished, 0) as current_count_surveys_surveypartiallyfinished,\n        \n        coalesce(pivoted_metrics.current_count_surveys_surveyfinished, 0) as current_count_surveys_surveyfinished,\n        \n        coalesce(pivoted_metrics.current_count_surveys_surveyscreenedout, 0) as current_count_surveys_surveyscreenedout,\n        \n        coalesce(pivoted_metrics.current_count_surveys_sessionexpired, 0) as current_count_surveys_sessionexpired,\n        \n        coalesce(pivoted_metrics.total_count_contacts, 0) as total_count_contacts,\n        coalesce(pivoted_metrics.count_contacts_sent_surveys, 0) as count_contacts_sent_surveys,\n        coalesce(pivoted_metrics.count_contacts_opened_surveys, 0) as count_contacts_opened_surveys,\n        coalesce(pivoted_metrics.count_contacts_started_surveys, 0) as count_contacts_started_surveys,\n        coalesce(pivoted_metrics.count_contacts_completed_surveys, 0) as count_contacts_completed_surveys,\n        pivoted_metrics.first_survey_sent_at,\n        pivoted_metrics.last_survey_sent_at,\n        pivoted_metrics.first_survey_opened_at,\n        pivoted_metrics.last_survey_opened_at,\n        pivoted_metrics.first_response_completed_at,\n        pivoted_metrics.last_response_completed_at,\n        pivoted_metrics.avg_time_to_open_in_seconds,\n        pivoted_metrics.avg_time_to_start_in_seconds,\n        pivoted_metrics.avg_time_to_complete_in_seconds,\n        calc_medians.median_time_to_open_in_seconds,\n        calc_medians.median_time_to_start_in_seconds,\n        calc_medians.median_time_to_complete_in_seconds\n\n    from distribution\n    left join qualtrics_user \n        on distribution.owner_user_id = qualtrics_user.user_id \n        and distribution.source_relation = qualtrics_user.source_relation\n    left join distribution as parent_distribution\n        on distribution.parent_distribution_id = parent_distribution.distribution_id\n        and distribution.source_relation = parent_distribution.source_relation\n    left join pivoted_metrics \n        on distribution.distribution_id = pivoted_metrics.distribution_id \n        and distribution.source_relation = pivoted_metrics.source_relation\n    left join calc_medians \n        on distribution.distribution_id = calc_medians.distribution_id \n        and distribution.source_relation = calc_medians.source_relation\n    left join directory_mailing_list\n        on distribution.recipient_mailing_list_id = directory_mailing_list.mailing_list_id\n        and distribution.source_relation = directory_mailing_list.source_relation\n    \n    left join core_mailing_list\n        on distribution.recipient_mailing_list_id = core_mailing_list.mailing_list_id\n        and distribution.source_relation = core_mailing_list.source_relation\n    \n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`qualtrics_tests_qualtrics`.`qualtrics__distribution`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:32.292182Z", "completed_at": "2023-12-19T20:57:32.324738Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:32.325283Z", "completed_at": "2023-12-19T20:57:32.325289Z"}], "thread_id": "Thread-3", "execution_time": 0.04843401908874512, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.qualtrics_source.not_null_stg_qualtrics__user_user_id.816e912ff9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_id\nfrom `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__user`\nwhere user_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:32.304019Z", "completed_at": "2023-12-19T20:57:32.331806Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:32.349220Z", "completed_at": "2023-12-19T20:57:32.349225Z"}], "thread_id": "Thread-1", "execution_time": 0.04629206657409668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.qualtrics.dbt_utils_unique_combination_of_columns_qualtrics__distribution_source_relation__distribution_id.e7ba527eec", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, distribution_id\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics`.`qualtrics__distribution`\n    group by source_relation, distribution_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:32.297302Z", "completed_at": "2023-12-19T20:57:32.350456Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:32.350935Z", "completed_at": "2023-12-19T20:57:32.350938Z"}], "thread_id": "Thread-2", "execution_time": 0.054685115814208984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.qualtrics.qualtrics__survey", "compiled": true, "compiled_code": "with  __dbt__cte__int_qualtrics__survey as (\nwith survey as (\n\n    select *\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__survey`\n),\n\nqualtrics_user as (\n\n    select *\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__user`\n),\n\nsurvey_version as (\n\n    select *\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__survey_version`\n),\n\nlatest_version as (\n\n    select *\n    from survey_version \n    where is_published\n),\n\nagg_versions as (\n\n    select \n        survey_id,\n        source_relation,\n        count(distinct version_number) as count_published_versions\n    from survey_version\n    where was_published and not is_deleted\n    group by 1,2\n),\n\nsurvey_join as (\n\n    select\n\n        survey.*,\n        latest_version.version_id,\n        latest_version.version_number,\n        latest_version.version_description,\n        latest_version.created_at as survey_version_created_at,\n        agg_versions.count_published_versions,\n        latest_version.publisher_user_id,\n        version_publisher.email as publisher_email, \n        creator.email as creator_email,\n        owner.email as owner_email\n\n    from survey\n    left join latest_version\n        on survey.survey_id = latest_version.survey_id\n        and survey.source_relation = latest_version.source_relation\n    left join qualtrics_user as version_publisher\n        on latest_version.publisher_user_id = version_publisher.user_id\n        and latest_version.source_relation = version_publisher.source_relation\n    left join qualtrics_user as owner\n        on survey.owner_user_id = owner.user_id\n        and survey.source_relation = owner.source_relation\n    left join qualtrics_user as creator\n        on survey.creator_user_id = creator.user_id\n        and survey.source_relation = creator.source_relation\n    left join agg_versions \n        on survey.survey_id = agg_versions.survey_id\n        and survey.source_relation = agg_versions.source_relation\n)\n\nselect *\nfrom survey_join\n), survey as (\n-- contains survey version + associated internal-user data\n    select *\n    from __dbt__cte__int_qualtrics__survey\n),\n\nresponses as (\n\n    select *\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__survey_response`\n),\n\nquestion as (\n\n    select *\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__question`\n),\n\nagg_questions as (\n\n    select \n        survey_id,\n        source_relation,\n        count(distinct question_id) as count_questions\n    from question \n    where not coalesce(is_deleted, false)\n    group by 1,2\n),\n\nagg_responses as (\n\n    \n    \n\n    select\n        survey_id,\n        source_relation,\n        avg(duration_in_seconds) as avg_response_duration_in_seconds,\n        avg(progress) as avg_survey_progress_pct,\n        count(distinct response_id) as count_survey_responses,\n        count(distinct case when is_finished then response_id else null end) as count_completed_survey_responses,\n        count(distinct \n                case \n                when \n  \n\n    timestamp_diff(\n        current_timestamp(),\n        recorded_date,\n        day\n    )\n\n\n <= 30 then response_id\n                else null end) as count_survey_responses_30d,\n        count(distinct \n                case \n                when is_finished and \n  \n\n    timestamp_diff(\n        current_timestamp(),\n        recorded_date,\n        day\n    )\n\n\n <= 30 then response_id\n                else null end) as count_completed_survey_responses_30d,\n        \n        -- pivot out distribution channel responses\n        \n        count(distinct \n                case \n                when distribution_channel = 'anonymous' then response_id\n                else null end) as count_anonymous_survey_responses,\n        count(distinct \n                case \n                when distribution_channel = 'anonymous' and is_finished then response_id\n                else null end) as count_anonymous_completed_survey_responses,\n        \n        count(distinct \n                case \n                when distribution_channel = 'social' then response_id\n                else null end) as count_social_survey_responses,\n        count(distinct \n                case \n                when distribution_channel = 'social' and is_finished then response_id\n                else null end) as count_social_completed_survey_responses,\n        \n        count(distinct \n                case \n                when distribution_channel = 'gl' then response_id\n                else null end) as count_gl_survey_responses,\n        count(distinct \n                case \n                when distribution_channel = 'gl' and is_finished then response_id\n                else null end) as count_gl_completed_survey_responses,\n        \n        count(distinct \n                case \n                when distribution_channel = 'qr' then response_id\n                else null end) as count_qr_survey_responses,\n        count(distinct \n                case \n                when distribution_channel = 'qr' and is_finished then response_id\n                else null end) as count_qr_completed_survey_responses,\n        \n        count(distinct \n                case \n                when distribution_channel = 'email' then response_id\n                else null end) as count_email_survey_responses,\n        count(distinct \n                case \n                when distribution_channel = 'email' and is_finished then response_id\n                else null end) as count_email_completed_survey_responses,\n        \n        count(distinct \n                case \n                when distribution_channel = 'smsinvite' then response_id\n                else null end) as count_smsinvite_survey_responses,\n        count(distinct \n                case \n                when distribution_channel = 'smsinvite' and is_finished then response_id\n                else null end) as count_smsinvite_completed_survey_responses,\n        \n\n        count(distinct case \n                when distribution_channel not in ('anonymous', 'social', 'gl', 'qr', 'email', 'smsinvite') then response_id\n                else null end) as count_uncategorized_survey_responses,\n        count(distinct case \n                when is_finished and distribution_channel not in ('anonymous', 'social', 'gl', 'qr', 'email', 'smsinvite') then response_id\n                else null end) as count_uncategorized_completed_survey_responses\n\n    from responses \n    group by 1,2\n),\n\ncalc_medians as (\n\n    select \n        survey_id,\n        source_relation,\n        median_response_duration_in_seconds,\n        median_survey_progress_pct\n        \n    from (\n        select \n            survey_id, \n            source_relation,\n            \n\n    percentile_cont( \n        duration_in_seconds, \n        0.5) \n        over (partition by survey_id,source_relation    \n        )\n\n as median_response_duration_in_seconds,\n            \n\n    percentile_cont( \n        progress, \n        0.5) \n        over (partition by survey_id,source_relation    \n        )\n\n as median_survey_progress_pct\n\n        from responses\n         -- percentile macro uses an aggregate function on postgres and window functions on other DBs\n    ) as rollup_medians\n     group by 1,2,3,4  -- roll up if using window function\n),\n\nsurvey_join as (\n\n    select\n        survey.*,\n        coalesce(agg_questions.count_questions, 0) as count_questions,\n\n        agg_responses.avg_response_duration_in_seconds,\n        calc_medians.median_response_duration_in_seconds,\n        agg_responses.avg_survey_progress_pct,\n        calc_medians.median_survey_progress_pct,\n        coalesce(agg_responses.count_survey_responses, 0) as count_survey_responses,\n        coalesce(agg_responses.count_completed_survey_responses, 0) as count_completed_survey_responses,\n        coalesce(agg_responses.count_survey_responses_30d, 0) as count_survey_responses_30d,\n        coalesce(agg_responses.count_completed_survey_responses_30d, 0) as count_completed_survey_responses_30d,\n\n        -- distribution channels\n        coalesce(agg_responses.count_anonymous_survey_responses, 0) as count_anonymous_survey_responses,\n        coalesce(agg_responses.count_anonymous_completed_survey_responses, 0) as count_anonymous_completed_survey_responses,\n        coalesce(agg_responses.count_social_survey_responses, 0) as count_social_media_survey_responses,\n        coalesce(agg_responses.count_social_completed_survey_responses, 0) as count_social_media_completed_survey_responses,\n        coalesce(agg_responses.count_gl_survey_responses, 0) as count_personal_link_survey_responses,\n        coalesce(agg_responses.count_gl_completed_survey_responses, 0) as count_personal_link_completed_survey_responses,\n        coalesce(agg_responses.count_qr_survey_responses, 0) as count_qr_code_survey_responses,\n        coalesce(agg_responses.count_qr_completed_survey_responses, 0) as count_qr_code_completed_survey_responses,\n        coalesce(agg_responses.count_email_survey_responses, 0) as count_email_survey_responses,\n        coalesce(agg_responses.count_email_completed_survey_responses, 0) as count_email_completed_survey_responses,\n        coalesce(agg_responses.count_smsinvite_survey_responses, 0) as count_sms_survey_responses,\n        coalesce(agg_responses.count_smsinvite_completed_survey_responses, 0) as count_sms_completed_survey_responses,\n        coalesce(agg_responses.count_uncategorized_survey_responses, 0) as count_uncategorized_survey_responses,\n        coalesce(agg_responses.count_uncategorized_completed_survey_responses, 0) as count_uncategorized_completed_survey_responses\n\n    from survey \n    left join agg_questions\n        on survey.survey_id = agg_questions.survey_id\n        and survey.source_relation = agg_questions.source_relation\n    left join agg_responses\n        on survey.survey_id = agg_responses.survey_id\n        and survey.source_relation = agg_responses.source_relation\n    left join calc_medians \n        on survey.survey_id = calc_medians.survey_id\n        and survey.source_relation = calc_medians.source_relation\n)\n\nselect *\nfrom survey_join", "relation_name": "`dbt-package-testing`.`qualtrics_tests_qualtrics`.`qualtrics__survey`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:32.352600Z", "completed_at": "2023-12-19T20:57:32.414253Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:32.414756Z", "completed_at": "2023-12-19T20:57:32.414761Z"}], "thread_id": "Thread-3", "execution_time": 0.06322193145751953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.qualtrics.dbt_utils_unique_combination_of_columns_qualtrics__survey_source_relation__survey_id.c9eda9bf51", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, survey_id\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics`.`qualtrics__survey`\n    group by source_relation, survey_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:32.146105Z", "completed_at": "2023-12-19T20:57:34.842440Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:34.843465Z", "completed_at": "2023-12-19T20:57:34.843483Z"}], "thread_id": "Thread-4", "execution_time": 2.6995949745178223, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.qualtrics.qualtrics__daily_breakdown", "compiled": true, "compiled_code": "with response as (\n\n    select *\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics`.`qualtrics__response`\n),\n\ncontact as (\n\n    select *\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics`.`qualtrics__contact`\n),\n\ncontact_mailing_list_membership as (\n\n    select *\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__contact_mailing_list_membership`\n),\n\ndistribution_contact as (\n\n    select *\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics_source`.`stg_qualtrics__distribution_contact`\n),\n\nspine as (\n\n    \n    \n    \n    \n    \n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 629\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2022-04-06' as date) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= \n\n        datetime_add(\n            cast( timestamp_trunc(\n        cast(current_timestamp as timestamp),\n        day\n    ) as datetime),\n        interval 1 week\n        )\n\n\n\n)\n\nselect * from filtered\n\n \n),\n\nsource_relations as (\n\n    select\n        distinct source_relation \n    from distribution_contact\n),\n\nspine_cross_join as (\n\n    select \n        spine.date_day, \n        source_relations.source_relation\n    from spine \n    cross join source_relations\n),\n\nagg_responses as (\n    \n    \n\n    select \n        cast(timestamp_trunc(\n        cast(survey_response_recorded_at as timestamp),\n        day\n    ) as date) as date_day,\n        source_relation,\n        count(distinct survey_id) as count_distinct_surveys_responded_to,\n        count(distinct survey_response_id) as total_count_survey_responses,\n        count(distinct case when is_finished_with_survey then survey_response_id end) as total_count_completed_survey_responses,\n\n        \n        count(distinct \n                case \n                when distribution_channel = 'anonymous' then survey_response_id\n                else null end) as count_anonymous_survey_responses,\n        count(distinct \n                case \n                when distribution_channel = 'anonymous' and is_finished_with_survey then survey_response_id\n                else null end) as count_anonymous_completed_survey_responses,\n        \n        count(distinct \n                case \n                when distribution_channel = 'social' then survey_response_id\n                else null end) as count_social_survey_responses,\n        count(distinct \n                case \n                when distribution_channel = 'social' and is_finished_with_survey then survey_response_id\n                else null end) as count_social_completed_survey_responses,\n        \n        count(distinct \n                case \n                when distribution_channel = 'gl' then survey_response_id\n                else null end) as count_gl_survey_responses,\n        count(distinct \n                case \n                when distribution_channel = 'gl' and is_finished_with_survey then survey_response_id\n                else null end) as count_gl_completed_survey_responses,\n        \n        count(distinct \n                case \n                when distribution_channel = 'qr' then survey_response_id\n                else null end) as count_qr_survey_responses,\n        count(distinct \n                case \n                when distribution_channel = 'qr' and is_finished_with_survey then survey_response_id\n                else null end) as count_qr_completed_survey_responses,\n        \n        count(distinct \n                case \n                when distribution_channel = 'email' then survey_response_id\n                else null end) as count_email_survey_responses,\n        count(distinct \n                case \n                when distribution_channel = 'email' and is_finished_with_survey then survey_response_id\n                else null end) as count_email_completed_survey_responses,\n        \n        count(distinct \n                case \n                when distribution_channel = 'smsinvite' then survey_response_id\n                else null end) as count_smsinvite_survey_responses,\n        count(distinct \n                case \n                when distribution_channel = 'smsinvite' and is_finished_with_survey then survey_response_id\n                else null end) as count_smsinvite_completed_survey_responses,\n        \n        count(distinct case \n                when distribution_channel not in ('anonymous', 'social', 'gl', 'qr', 'email', 'smsinvite') then survey_response_id\n                else null end) as count_uncategorized_survey_responses,\n        count(distinct case \n                when is_finished_with_survey and distribution_channel not in ('anonymous', 'social', 'gl', 'qr', 'email', 'smsinvite') then survey_response_id\n                else null end) as count_uncategorized_completed_survey_responses\n    from response \n    group by 1,2\n),\n\nagg_survey_distribution as (\n-- all metrics here relative to the day that the survey was sent\n    select \n        cast(timestamp_trunc(\n        cast(sent_at as timestamp),\n        day\n    ) as date) as date_day,\n        source_relation,\n        count(distinct contact_id) as count_contacts_sent_surveys,\n        count(distinct case when opened_at is not null then contact_id end) as count_contacts_opened_sent_surveys,\n        count(distinct case when response_started_at is not null then contact_id end) as count_contacts_started_sent_surveys,\n        count(distinct case when response_completed_at is not null then contact_id end) as count_contacts_completed_sent_surveys\n    from distribution_contact\n    group by 1,2\n),\n\nagg_created_contacts as (\n\n    select\n        cast(timestamp_trunc(\n        cast(created_at as timestamp),\n        day\n    ) as date) as date_day,\n        source_relation,\n        count(distinct contact_id) as count_contacts_created\n    from contact  \n    group by 1,2\n),\n\nagg_directory_unsubscriptions as (\n\n    select\n        cast(timestamp_trunc(\n        cast(unsubscribed_from_directory_at as timestamp),\n        day\n    ) as date) as date_day,\n        source_relation,\n        count(distinct contact_id) as count_contacts_unsubscribed_from_directory\n    from contact\n    group by 1,2\n),\n\nagg_mailing_list_unsubscriptions as (\n\n    select\n        cast(timestamp_trunc(\n        cast(unsubscribed_at as timestamp),\n        day\n    ) as date) as date_day,\n        source_relation,\n        count(distinct contact_id) as count_contacts_unsubscribed_from_mailing_list\n    from contact_mailing_list_membership\n    group by 1,2\n),\n\nfinal as (\n\n    select \n        coalesce(agg_responses.source_relation, agg_survey_distribution.source_relation, agg_created_contacts.source_relation, agg_directory_unsubscriptions.source_relation, agg_mailing_list_unsubscriptions.source_relation, spine_cross_join.source_relation) as source_relation,\n        spine_cross_join.date_day,\n        coalesce(agg_created_contacts.count_contacts_created, 0) as count_contacts_created,\n        coalesce(agg_directory_unsubscriptions.count_contacts_unsubscribed_from_directory, 0) as count_contacts_unsubscribed_from_directory,\n        coalesce(agg_mailing_list_unsubscriptions.count_contacts_unsubscribed_from_mailing_list, 0) as count_contacts_unsubscribed_from_mailing_list,\n\n        coalesce(agg_survey_distribution.count_contacts_sent_surveys, 0) as count_contacts_sent_surveys,\n        coalesce(agg_survey_distribution.count_contacts_opened_sent_surveys, 0) as count_contacts_opened_sent_surveys,\n        coalesce(agg_survey_distribution.count_contacts_started_sent_surveys, 0) as count_contacts_started_sent_surveys,\n        coalesce(agg_survey_distribution.count_contacts_completed_sent_surveys, 0) as count_contacts_completed_sent_surveys,\n\n        coalesce(agg_responses.count_distinct_surveys_responded_to, 0) as count_distinct_surveys_responded_to,\n        coalesce(agg_responses.total_count_survey_responses, 0) as total_count_survey_responses,\n        coalesce(agg_responses.total_count_completed_survey_responses, 0) as total_count_completed_survey_responses,\n\n        -- distribution channels\n        coalesce(agg_responses.count_anonymous_survey_responses, 0) as count_anonymous_survey_responses,\n        coalesce(agg_responses.count_anonymous_completed_survey_responses, 0) as count_anonymous_completed_survey_responses,\n        coalesce(agg_responses.count_social_survey_responses, 0) as count_social_media_survey_responses,\n        coalesce(agg_responses.count_social_completed_survey_responses, 0) as count_social_media_completed_survey_responses,\n        coalesce(agg_responses.count_gl_survey_responses, 0) as count_personal_link_survey_responses,\n        coalesce(agg_responses.count_gl_completed_survey_responses, 0) as count_personal_link_completed_survey_responses,\n        coalesce(agg_responses.count_qr_survey_responses, 0) as count_qr_code_survey_responses,\n        coalesce(agg_responses.count_qr_completed_survey_responses, 0) as count_qr_code_completed_survey_responses,\n        coalesce(agg_responses.count_email_survey_responses, 0) as count_email_survey_responses,\n        coalesce(agg_responses.count_email_completed_survey_responses, 0) as count_email_completed_survey_responses,\n        coalesce(agg_responses.count_smsinvite_survey_responses, 0) as count_sms_survey_responses,\n        coalesce(agg_responses.count_smsinvite_completed_survey_responses, 0) as count_sms_completed_survey_responses,\n        coalesce(agg_responses.count_uncategorized_survey_responses, 0) as count_uncategorized_survey_responses,\n        coalesce(agg_responses.count_uncategorized_completed_survey_responses, 0) as count_uncategorized_completed_survey_responses\n\n    from spine_cross_join\n    left join agg_responses\n        on spine_cross_join.date_day = agg_responses.date_day\n            and spine_cross_join.source_relation = agg_responses.source_relation\n    left join agg_survey_distribution\n        on spine_cross_join.date_day = agg_survey_distribution.date_day\n            and spine_cross_join.source_relation = agg_survey_distribution.source_relation\n    left join agg_created_contacts\n        on spine_cross_join.date_day = agg_created_contacts.date_day\n            and spine_cross_join.source_relation = agg_created_contacts.source_relation\n    left join agg_directory_unsubscriptions\n        on spine_cross_join.date_day = agg_directory_unsubscriptions.date_day\n            and spine_cross_join.source_relation = agg_directory_unsubscriptions.source_relation\n    left join agg_mailing_list_unsubscriptions\n        on spine_cross_join.date_day = agg_mailing_list_unsubscriptions.date_day\n            and spine_cross_join.source_relation = agg_mailing_list_unsubscriptions.source_relation\n    \n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`qualtrics_tests_qualtrics`.`qualtrics__daily_breakdown`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-19T20:57:34.847289Z", "completed_at": "2023-12-19T20:57:34.853702Z"}, {"name": "execute", "started_at": "2023-12-19T20:57:34.854502Z", "completed_at": "2023-12-19T20:57:34.854509Z"}], "thread_id": "Thread-2", "execution_time": 0.009077072143554688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.qualtrics.dbt_utils_unique_combination_of_columns_qualtrics__daily_breakdown_date_day__source_relation.dbc8565bca", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, source_relation\n    from `dbt-package-testing`.`qualtrics_tests_qualtrics`.`qualtrics__daily_breakdown`\n    group by date_day, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}], "elapsed_time": 5.882522106170654, "args": {"enable_legacy_logger": false, "compile": true, "which": "generate", "strict_mode": false, "introspect": true, "warn_error_options": {"include": [], "exclude": []}, "log_level": "info", "write_json": true, "profiles_dir": "/Users/jamie.rodriguez/.dbt", "log_file_max_bytes": 10485760, "version_check": true, "log_format_file": "debug", "use_colors_file": true, "send_anonymous_usage_stats": true, "print": true, "static_parser": true, "select": [], "empty_catalog": false, "quiet": false, "static": false, "favor_state": false, "show_resource_report": false, "partial_parse": true, "log_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Qualtrics/dbt_qualtrics/integration_tests/logs", "invocation_command": "dbt docs generate", "populate_cache": true, "defer": false, "macro_debugging": false, "printer_width": 80, "cache_selected_only": false, "log_format": "default", "partial_parse_file_diff": true, "project_dir": "/Users/jamie.rodriguez/Desktop/dbt_repos/Qualtrics/dbt_qualtrics/integration_tests", "log_level_file": "debug", "use_colors": true, "vars": {}, "indirect_selection": "eager", "exclude": []}}